var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { d as defineComponent, u as unref, b as createBlock, y as createCommentVNode, o as openBlock, S as useAppInfo, f as ref, g as watch, c as createElementBlock, N as Fragment, Y, w as withDirectives, v as vShow, s as safelyRegisterElement } from "../customElements.es.js";
import { u as useCurrentUser, _ as _sfc_main$3, a as _sfc_main$4, b as useProfileElementSetup } from "../customElements.es4.js";
const _sfc_main$2 = defineComponent({
  __name: "PasskeyTableView",
  props: {
    appId: {},
    appInfo: {},
    webauthnAllowed: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { userInfo, loading, refreshDevices } = useCurrentUser(props.appInfo);
    return (_ctx, _cache) => {
      return !unref(loading) ? (openBlock(), createBlock(_sfc_main$3, {
        key: 0,
        appId: _ctx.appId,
        userInfo: unref(userInfo),
        refreshDevices: unref(refreshDevices),
        webauthnAllowed: _ctx.webauthnAllowed
      }, null, 8, ["appId", "userInfo", "refreshDevices", "webauthnAllowed"])) : createCommentVNode("", true);
    };
  }
});
const _hoisted_1 = {
  key: 1,
  class: "notification is-danger has-text-centered"
};
const _sfc_main$1 = defineComponent({
  __name: "MainView",
  props: {
    appId: {}
  },
  setup(__props) {
    const props = __props;
    const { appInfo, loading: appInfoLoading, invalidAppId } = useAppInfo(props.appId);
    const webauthnAllowed = ref(false);
    const initialized = ref(false);
    watch(appInfo, () => __async(this, null, function* () {
      initialized.value = false;
      if (appInfo.value === void 0) {
        return;
      }
      const passage = new Y(props.appId);
      const authOriginValid = passage.checkWebauthnConfig(appInfo.value);
      if (authOriginValid) {
        webauthnAllowed.value = (yield passage.getCredentialAvailable()).platform;
      }
      initialized.value = true;
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(appInfoLoading) || !initialized.value ? (openBlock(), createBlock(_sfc_main$4, {
          key: 0,
          active: unref(appInfoLoading) || !initialized.value
        }, null, 8, ["active"])) : unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_1, " Passage-Profile Error: Invalid App ID. ")) : createCommentVNode("", true),
        unref(appInfo) && initialized.value ? (openBlock(), createBlock(_sfc_main$2, {
          key: 2,
          appId: _ctx.appId,
          appInfo: unref(appInfo),
          webauthnAllowed: webauthnAllowed.value
        }, null, 8, ["appId", "appInfo", "webauthnAllowed"])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _sfc_main = defineComponent({
  __name: "PasskeyTable.ce",
  props: {
    appId: {},
    lang: {},
    defaultCountryCode: {}
  },
  setup(__props) {
    const props = __props;
    const { languageLoading, containerRef } = useProfileElementSetup(props);
    return (_ctx, _cache) => {
      var _a;
      return withDirectives((openBlock(), createElementBlock("div", {
        id: "passage-profile-container",
        ref_key: "containerRef",
        ref: containerRef
      }, [
        (openBlock(), createBlock(_sfc_main$1, {
          key: _ctx.appId,
          appId: (_a = _ctx.appId) != null ? _a : ""
        }, null, 8, ["appId"]))
      ], 512)), [
        [vShow, !unref(languageLoading)]
      ]);
    };
  }
});
function registerPassageLoginElement() {
  safelyRegisterElement(_sfc_main, "passkey-table");
}
registerPassageLoginElement();
export { registerPassageLoginElement };
//# 
