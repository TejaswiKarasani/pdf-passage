var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { d as defineComponent, f as ref, a8 as watchEffect, a9 as onUnmounted, _ as _export_sfc, o as openBlock, b as createBlock, e as withCtx, c as createElementBlock, a as createBaseVNode, p as normalizeClass, t as toDisplayString, r as renderSlot, n as withModifiers, y as createCommentVNode, a6 as withKeys, M as Transition, h as useLocale, Y, i as computed, a4 as resolveComponent, m as createTextVNode, aa as onUpdated, j as onMounted, g as watch, u as unref, w as withDirectives, q as vModelText, U as UAParser, I as Icons, J as InlineSvg, Q as useAddDevice, F as createVNode, N as Fragment, ab as h, x as normalizeStyle, P as renderList, a3 as dayjs, a5 as ce, Z as onBeforeUpdate, $ as useStoreLocale, a0 as useIntlTelInput, L as useDefaultCountryCode } from "./customElements.es.js";
const _sfc_main$a = defineComponent({
  name: "Modal",
  props: {
    active: {
      type: Boolean,
      default: false
    },
    title: {
      type: String,
      default: ""
    },
    onPrimaryButton: {
      type: Function,
      required: false
    },
    onCancelButton: {
      type: Function,
      required: false
    },
    primaryButtonText: {
      type: String,
      default: "OK"
    },
    cancelButtonText: {
      type: String,
      default: "Cancel"
    },
    info: {
      type: Boolean,
      default: false
    },
    cancelOnly: {
      type: Boolean,
      default: false
    },
    danger: {
      type: Boolean,
      default: false
    }
  },
  setup(props, context) {
    const isActive = ref(false);
    watchEffect(() => {
      isActive.value = props.active;
      if (isActive.value) {
        document.documentElement.classList.add("is-clipped");
      } else {
        document.documentElement.classList.remove("is-clipped");
      }
    });
    const closeModal = () => {
      isActive.value = false;
    };
    function primaryAction() {
      if (props.onPrimaryButton === void 0) {
        context.emit("update:active", false);
        return;
      }
      props.onPrimaryButton().then((closeDialog) => {
        if (closeDialog) {
          context.emit("update:active", false);
        }
      });
    }
    function cancelAction() {
      if (props.onCancelButton === void 0) {
        context.emit("update:active", false);
        return;
      }
      props.onCancelButton().then(() => {
        context.emit("update:active", false);
      });
    }
    onUnmounted(() => document.documentElement.classList.remove("is-clipped"));
    return {
      isActive,
      closeModal,
      primaryAction,
      cancelAction
    };
  }
});
const _hoisted_1$8 = /* @__PURE__ */ createBaseVNode("div", { class: "passage-modal-background" }, null, -1);
const _hoisted_2$8 = { class: "passage-modal-card" };
const _hoisted_3$6 = { class: "passage-modal-body" };
const _hoisted_4$3 = { class: "passage-modal-footer" };
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: "modal",
    mode: "out-in"
  }, {
    default: withCtx(() => [
      _ctx.isActive ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["passage-modal", { "is-active": _ctx.isActive }]),
        part: "modal",
        role: "dialog",
        onKeyup: [
          _cache[2] || (_cache[2] = withKeys((...args) => _ctx.primaryAction && _ctx.primaryAction(...args), ["enter"])),
          _cache[3] || (_cache[3] = withKeys((...args) => _ctx.cancelAction && _ctx.cancelAction(...args), ["esc"]))
        ]
      }, [
        _hoisted_1$8,
        createBaseVNode("div", _hoisted_2$8, [
          createBaseVNode("div", {
            class: normalizeClass(["title main-title", { "danger-header": _ctx.danger }])
          }, toDisplayString(_ctx.title), 3),
          createBaseVNode("div", _hoisted_3$6, [
            renderSlot(_ctx.$slots, "default")
          ]),
          createBaseVNode("div", _hoisted_4$3, [
            !_ctx.cancelOnly ? (openBlock(), createElementBlock("button", {
              key: 0,
              class: "button is-modal",
              part: "modal-button modal-primary",
              onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.primaryAction && _ctx.primaryAction(...args), ["prevent"]))
            }, toDisplayString(_ctx.primaryButtonText), 1)) : createCommentVNode("", true),
            !_ctx.info ? (openBlock(), createElementBlock("button", {
              key: 1,
              class: normalizeClass(["button is-secondary is-modal cancel-button", { "cancel-only": _ctx.cancelOnly }]),
              part: "modal-button modal-secondary",
              onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.cancelAction && _ctx.cancelAction(...args), ["prevent"]))
            }, toDisplayString(_ctx.cancelButtonText), 3)) : createCommentVNode("", true)
          ])
        ])
      ], 34)) : createCommentVNode("", true)
    ]),
    _: 3
  });
}
var Modal = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$3]]);
function useRevokeDevice(appId) {
  const { t } = useLocale();
  const passageUser = new Y(appId).getCurrentUser();
  const revokePending = ref(false);
  const errorMessage = ref("");
  function revokeDevice(device) {
    return __async(this, null, function* () {
      revokePending.value = true;
      try {
        yield passageUser.deleteDevice(device);
        return true;
      } catch (e) {
        errorMessage.value = t("failed-to-revoke-this-device");
        return false;
      } finally {
        revokePending.value = false;
      }
    });
  }
  return {
    revokeDevice,
    revokePending,
    errorMessage
  };
}
const _sfc_main$9 = defineComponent({
  name: "Revoke Device",
  components: {
    Modal
  },
  props: {
    device: {
      type: Object,
      required: true
    },
    active: {
      type: Boolean,
      required: true
    },
    currentDeviceId: {
      type: String,
      required: false
    },
    appId: {
      type: String,
      required: true
    }
  },
  emits: ["dialogClose", "update:active"],
  setup(props, context) {
    const { t } = useLocale();
    const showModal = computed({
      get() {
        return props.active;
      },
      set(newValue) {
        context.emit("update:active", newValue);
      }
    });
    const { revokeDevice, revokePending, errorMessage } = useRevokeDevice(props.appId);
    function onDeleteDevice() {
      return __async(this, null, function* () {
        if (errorMessage.value) {
          context.emit("dialogClose");
          return true;
        }
        const result = yield revokeDevice(props.device);
        if (result) {
          context.emit("dialogClose");
        }
        return result;
      });
    }
    return {
      showModal,
      onDeleteDevice,
      revokePending,
      errorMessage,
      t
    };
  }
});
const _hoisted_1$7 = { key: 1 };
const _hoisted_2$7 = { key: 0 };
const _hoisted_3$5 = {
  key: 2,
  class: "text is-danger"
};
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_loading = resolveComponent("loading");
  const _component_modal = resolveComponent("modal");
  return openBlock(), createBlock(_component_modal, {
    title: _ctx.t("revoke-device"),
    active: _ctx.showModal,
    "onUpdate:active": _cache[0] || (_cache[0] = ($event) => _ctx.showModal = $event),
    primaryButtonText: !!_ctx.errorMessage ? _ctx.t("ok") : _ctx.t("revoke-device"),
    onPrimaryButton: _ctx.onDeleteDevice,
    info: !!_ctx.errorMessage
  }, {
    default: withCtx(() => {
      var _a;
      return [
        _ctx.revokePending ? (openBlock(), createBlock(_component_loading, {
          key: 0,
          active: _ctx.revokePending
        }, null, 8, ["active"])) : createCommentVNode("", true),
        !_ctx.errorMessage ? (openBlock(), createElementBlock("div", _hoisted_1$7, [
          createTextVNode(toDisplayString(_ctx.t("confirm-remove-device")) + " ", 1),
          ((_a = _ctx.device) == null ? void 0 : _a.id) === _ctx.currentDeviceId ? (openBlock(), createElementBlock("b", _hoisted_2$7, toDisplayString(_ctx.t("remove-current-device-warning")), 1)) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(_ctx.t("are-you-sure-you-want-to-continue")), 1)
        ])) : createCommentVNode("", true),
        _ctx.errorMessage ? (openBlock(), createElementBlock("div", _hoisted_3$5, toDisplayString(_ctx.errorMessage), 1)) : createCommentVNode("", true)
      ];
    }),
    _: 1
  }, 8, ["title", "active", "primaryButtonText", "onPrimaryButton", "info"]);
}
var RevokeDevice = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$2]]);
function useEditDevice(appId) {
  const { t } = useLocale();
  const passageUser = new Y(appId).getCurrentUser();
  const editPending = ref(false);
  const errorMessage = ref("");
  function renameDevice(deviceID, newFriendlyName) {
    return __async(this, null, function* () {
      editPending.value = true;
      try {
        yield passageUser.editDevice(deviceID, { friendly_name: newFriendlyName });
        return true;
      } catch (e) {
        errorMessage.value = t("failed-to-rename-this-device");
        return false;
      } finally {
        editPending.value = false;
      }
    });
  }
  return {
    renameDevice,
    editPending,
    errorMessage
  };
}
const _hoisted_1$6 = { class: "label input-box-title" };
const _hoisted_2$6 = { class: "message is-danger" };
const _hoisted_3$4 = {
  key: 1,
  class: "text is-danger"
};
const _sfc_main$8 = defineComponent({
  __name: "EditDevice",
  props: {
    deviceObject: {},
    active: { type: Boolean },
    newDevice: { type: Boolean },
    appId: {}
  },
  emits: ["dialogClose", "update:active"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const showModal = computed({
      get() {
        return props.active;
      },
      set(newValue) {
        emit("update:active", newValue);
      }
    });
    function clearErrors() {
      validationError.value = "";
      errorMessage.value = "";
    }
    function onCancel() {
      return __async(this, null, function* () {
        emit("dialogClose");
        clearErrors();
      });
    }
    const validationError = ref("");
    const newDeviceName = ref("");
    onUpdated(() => {
      var _a, _b;
      newDeviceName.value = (_b = (_a = props.deviceObject) == null ? void 0 : _a.friendly_name) != null ? _b : "";
    });
    onMounted(() => {
      var _a, _b;
      newDeviceName.value = (_b = (_a = props.deviceObject) == null ? void 0 : _a.friendly_name) != null ? _b : "";
    });
    const { renameDevice, editPending, errorMessage } = useEditDevice(props.appId);
    function onEditDevice() {
      return __async(this, null, function* () {
        if (!props.deviceObject) {
          return false;
        }
        if (errorMessage.value) {
          emit("dialogClose");
          clearErrors();
          return true;
        }
        if (newDeviceName.value === props.deviceObject.friendly_name) {
          emit("dialogClose");
          return true;
        }
        if (!newDeviceName.value) {
          validationError.value = t("device-name-is-required");
          return false;
        }
        if (newDeviceName.value.length > 64) {
          validationError.value = t("device-name-maximum");
          return false;
        }
        const result = yield renameDevice(props.deviceObject.id, newDeviceName.value);
        if (result) {
          emit("dialogClose");
          return true;
        }
        return result;
      });
    }
    const editDeviceInput = ref();
    watch(editDeviceInput, () => {
      if (editDeviceInput.value === void 0 || editDeviceInput.value === null) {
        return;
      }
      editDeviceInput.value.focus();
    });
    return (_ctx, _cache) => {
      const _component_loading = resolveComponent("loading");
      return openBlock(), createBlock(Modal, {
        title: _ctx.newDevice ? unref(t)("name-this-device") : unref(t)("edit-device"),
        active: showModal.value,
        "onUpdate:active": _cache[1] || (_cache[1] = ($event) => showModal.value = $event),
        primaryButtonText: !!unref(errorMessage) ? unref(t)("ok") : _ctx.newDevice ? unref(t)("add-device") : unref(t)("rename-device"),
        onPrimaryButton: onEditDevice,
        onCancelButton: onCancel,
        info: _ctx.newDevice
      }, {
        default: withCtx(() => [
          unref(editPending) ? (openBlock(), createBlock(_component_loading, {
            key: 0,
            active: unref(editPending)
          }, null, 8, ["active"])) : createCommentVNode("", true),
          createBaseVNode("div", null, toDisplayString(_ctx.newDevice ? unref(t)("give-this-device-a-name") : unref(t)("rename-this-device")), 1),
          createBaseVNode("div", _hoisted_1$6, toDisplayString(_ctx.newDevice ? unref(t)("device-name") : unref(t)("new-device-name")), 1),
          withDirectives(createBaseVNode("input", {
            type: "text",
            class: normalizeClass(["input", { "is-danger": validationError.value }]),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => newDeviceName.value = $event),
            onInput: clearErrors,
            part: "input",
            ref_key: "editDeviceInput",
            ref: editDeviceInput
          }, null, 34), [
            [vModelText, newDeviceName.value]
          ]),
          createBaseVNode("div", _hoisted_2$6, toDisplayString(validationError.value), 1),
          unref(errorMessage) ? (openBlock(), createElementBlock("div", _hoisted_3$4, toDisplayString(unref(errorMessage)), 1)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 8, ["title", "active", "primaryButtonText", "info"]);
    };
  }
});
const _sfc_main$7 = defineComponent({
  __name: "PlatformIcon",
  setup(__props) {
    var _a;
    const parser = new UAParser();
    const OS = (_a = parser.getOS().name) != null ? _a : "";
    let icon;
    if (OS.startsWith("Windows")) {
      icon = Icons.windowsHello;
    } else if (OS.startsWith("Mac OS") || OS.startsWith("iOS")) {
      icon = Icons.appleBiometric;
    } else {
      icon = Icons.genericBiometrics;
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(InlineSvg), {
        src: unref(icon),
        alt: "Platform device icon"
      }, null, 8, ["src"]);
    };
  }
});
const _sfc_main$6 = defineComponent({
  name: "Revoke Device",
  components: {
    Modal,
    EditDevice: _sfc_main$8,
    InlineSvg,
    PlatformIcon: _sfc_main$7
  },
  props: {
    active: {
      type: Boolean,
      required: true
    },
    appId: {
      type: String,
      required: true
    }
  },
  emits: ["dialogClose", "update:active"],
  setup(props, context) {
    const { t } = useLocale();
    const showAddModal = computed({
      get() {
        return props.active;
      },
      set(newValue) {
        context.emit("update:active", newValue);
      }
    });
    const showEditModal = ref(false);
    const { addDevice, addPending, errorMessage } = useAddDevice(props.appId);
    const newDevice = ref();
    function onAddDevice() {
      return __async(this, null, function* () {
        newDevice.value = yield addDevice();
        if (newDevice.value) {
          showAddModal.value = false;
          showEditModal.value = true;
          return true;
        }
        return false;
      });
    }
    watch(showAddModal, () => {
      if (showAddModal.value) {
        onAddDevice();
      }
    });
    function editDialogClose() {
      context.emit("dialogClose");
    }
    return {
      showAddModal,
      showEditModal,
      addDevice,
      errorMessage,
      addPending,
      onAddDevice,
      newDevice,
      editDialogClose,
      Icons,
      t
    };
  }
});
const _hoisted_1$5 = {
  class: "image has-text-centered",
  style: { "margin": "5px auto" }
};
const _hoisted_2$5 = {
  key: 1,
  class: "has-text-centered"
};
const _hoisted_3$3 = {
  key: 2,
  class: "text is-danger has-text-centered"
};
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_loading = resolveComponent("loading");
  const _component_inline_svg = resolveComponent("inline-svg");
  const _component_platform_icon = resolveComponent("platform-icon");
  const _component_modal = resolveComponent("modal");
  const _component_edit_device = resolveComponent("edit-device");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_modal, {
      title: _ctx.t("add-passkey"),
      active: _ctx.showAddModal,
      "onUpdate:active": _cache[0] || (_cache[0] = ($event) => _ctx.showAddModal = $event),
      cancelOnly: !_ctx.errorMessage,
      onPrimaryButton: _ctx.onAddDevice,
      primaryButtonText: _ctx.t("try-again")
    }, {
      default: withCtx(() => [
        _ctx.addPending ? (openBlock(), createBlock(_component_loading, {
          key: 0,
          active: _ctx.addPending
        }, null, 8, ["active"])) : createCommentVNode("", true),
        createBaseVNode("figure", _hoisted_1$5, [
          _ctx.errorMessage ? (openBlock(), createBlock(_component_inline_svg, {
            key: 0,
            src: _ctx.Icons.fingerprintFailed,
            alt: "Biometrics scan failed"
          }, null, 8, ["src"])) : (openBlock(), createBlock(_component_platform_icon, {
            key: 1,
            alt: "Biometrics scan"
          }))
        ]),
        !_ctx.errorMessage ? (openBlock(), createElementBlock("div", _hoisted_2$5, toDisplayString(_ctx.t("enable-this-device")), 1)) : createCommentVNode("", true),
        _ctx.errorMessage ? (openBlock(), createElementBlock("div", _hoisted_3$3, toDisplayString(_ctx.errorMessage), 1)) : createCommentVNode("", true)
      ]),
      _: 1
    }, 8, ["title", "active", "cancelOnly", "onPrimaryButton", "primaryButtonText"]),
    createVNode(_component_edit_device, {
      active: _ctx.showEditModal,
      "onUpdate:active": _cache[1] || (_cache[1] = ($event) => _ctx.showEditModal = $event),
      "app-id": _ctx.appId,
      deviceObject: _ctx.newDevice,
      onDialogClose: _ctx.editDialogClose,
      newDevice: ""
    }, null, 8, ["active", "app-id", "deviceObject", "onDialogClose"])
  ], 64);
}
var AddDevice = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$1]]);
const _sfc_main$5 = defineComponent({
  name: "Loading",
  props: {
    active: Boolean
  },
  setup(props, { attrs }) {
    return () => props.active ? h(
      Transition,
      {
        name: "fade",
        mode: "out-in"
      },
      () => {
        return [
          h(
            "div",
            __spreadProps(__spreadValues({}, attrs), {
              class: ["component-loading loading-overlay is-overlay"],
              title: "Loading..."
            }),
            [
              h("div", { class: ["loading-background is-overlay"] }, ""),
              h("div", { class: ["loading-icon"] })
            ]
          )
        ];
      }
    ) : null;
  }
});
const _sfc_main$4 = defineComponent({
  name: "Dropdown",
  components: {
    InlineSvg
  },
  props: {
    items: {
      type: Array,
      default: () => []
    },
    maxDropdownItems: {
      type: Number,
      default: 7
    },
    modelValue: null,
    readonly: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: String,
      default: "Select..."
    },
    error: {
      type: Boolean,
      default: false
    },
    colorScheme: {
      type: String,
      default: "default",
      required: false
    }
  },
  emits: {
    "change"(newValue) {
      return true;
    },
    "update:modelValue": (newValue) => {
      return true;
    }
  },
  setup(props, context) {
    const dropdownContainer = ref();
    const dropdownList = ref(null);
    function setItemRef(ref2) {
    }
    const selectedItem = computed(() => {
      return props.items.find((item) => item.value === props.modelValue);
    });
    const displayName = computed(() => {
      var _a, _b;
      return (_b = (_a = selectedItem.value) == null ? void 0 : _a.name) != null ? _b : props.placeholder;
    });
    const displayStyle = computed(() => {
      var _a, _b;
      return (_b = (_a = selectedItem.value) == null ? void 0 : _a.style) != null ? _b : "";
    });
    const showList = ref(false);
    const listMaxHeight = ref(0);
    function getListMaxHeight() {
      const listItemHeight = 30;
      const mininumItems = 2;
      const listGapOffset = 10;
      const absoluteMinHeight = listItemHeight * mininumItems;
      const absoluteMaxHeight = listItemHeight * props.maxDropdownItems + 1;
      if (dropdownContainer.value === null) {
        return absoluteMaxHeight;
      }
      const listTop = dropdownContainer.value.getBoundingClientRect().bottom;
      const windowHeight = window.innerHeight;
      const maxVisibleHeight = windowHeight - listTop - listGapOffset;
      if (maxVisibleHeight < absoluteMinHeight) {
        return absoluteMinHeight;
      }
      if (maxVisibleHeight > absoluteMaxHeight) {
        return absoluteMaxHeight;
      }
      return maxVisibleHeight;
    }
    function toggleList() {
      if (props.readonly) {
        return;
      }
      if (!showList.value) {
        listMaxHeight.value = getListMaxHeight();
      }
      showList.value = !showList.value;
    }
    function selectItem(item) {
      context.emit("change", item.value);
      context.emit("update:modelValue", item.value);
      showList.value = false;
    }
    function getListWidth() {
      if (dropdownList.value === null) {
        return 0;
      }
      const width = dropdownList.value.getBoundingClientRect().width;
      return Math.ceil(width);
    }
    const buttonWidth = ref(0);
    const listWidthStyle = ref("");
    onMounted(() => {
      const listWidth = getListWidth();
      const buttonPadding = 15;
      buttonWidth.value = getListWidth() - buttonPadding;
      listWidthStyle.value = `width: ${listWidth}px;`;
    });
    return {
      displayName,
      showList,
      selectItem,
      setItemRef,
      buttonWidth,
      dropdownContainer,
      listWidthStyle,
      listMaxHeight,
      toggleList,
      dropdownList,
      displayStyle,
      selectedItem,
      Icons
    };
  }
});
const _hoisted_1$4 = ["readonly"];
const _hoisted_2$4 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["dropdown-container", [_ctx.colorScheme]]),
    tabindex: "0",
    onFocusout: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.showList = false, ["prevent"])),
    ref: "dropdownContainer",
    readonly: _ctx.readonly
  }, [
    createBaseVNode("div", {
      class: normalizeClass(["dropdown-button", { expanded: _ctx.showList, error: _ctx.error }]),
      style: normalizeStyle(`width: ${_ctx.buttonWidth}px; ${_ctx.displayStyle}`),
      onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.toggleList && _ctx.toggleList(...args), ["prevent"]))
    }, [
      createBaseVNode("div", {
        class: normalizeClass(["dropdown-title", { placeholder: _ctx.selectedItem === void 0 }])
      }, toDisplayString(_ctx.displayName), 3),
      createVNode(_component_inline_svg, {
        src: _ctx.Icons.chevronDown,
        alt: "Chevron down"
      }, null, 8, ["src"])
    ], 6),
    createBaseVNode("div", {
      class: normalizeClass(["dropdown-list", { collapsed: !_ctx.showList }]),
      style: normalizeStyle(`max-height: ${_ctx.listMaxHeight}px; ${_ctx.listWidthStyle}`),
      ref: "dropdownList"
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {
        return openBlock(), createElementBlock("div", {
          class: normalizeClass(["item", { "bottom-border": index !== _ctx.items.length - 1 }]),
          style: normalizeStyle(item.style),
          key: index,
          ref_for: true,
          ref: _ctx.setItemRef,
          onClick: withModifiers(($event) => _ctx.selectItem(item), ["prevent"])
        }, toDisplayString(item.name), 15, _hoisted_2$4);
      }), 128))
    ], 6)
  ], 42, _hoisted_1$4);
}
var Dropdown = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render]]);
const _hoisted_1$3 = {
  key: 0,
  class: "passage-table-paginator"
};
const _hoisted_2$3 = { class: "page-size-selector" };
const _hoisted_3$2 = { style: { "margin-right": "15px" } };
const _hoisted_4$2 = { class: "paginator-text" };
const _hoisted_5$2 = { class: "paginator-buttons flex-row" };
const _hoisted_6$1 = ["onClick"];
const _hoisted_7$1 = ["onClick"];
const _hoisted_8$1 = ["onClick"];
const _hoisted_9$1 = ["onClick"];
const _hoisted_10$1 = ["onClick"];
const _sfc_main$3 = defineComponent({
  __name: "Paginator",
  props: {
    dataset: {},
    page: {}
  },
  emits: ["update:page"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const rowsPerPage = ref(5);
    const rowsPerPageOptions = [
      {
        name: "5",
        value: 5
      },
      {
        name: "10",
        value: 10
      },
      {
        name: "15",
        value: 15
      }
    ];
    const showPaginator = computed(() => {
      if (pages.value.length > 1) {
        return true;
      }
      if (props.dataset === void 0) {
        return false;
      }
      return props.dataset.length > 5;
    });
    const pages = computed(() => {
      if (props.dataset === void 0 || props.dataset.length === 0) {
        return [];
      }
      const result = [];
      for (let i = 0; i < props.dataset.length; i += rowsPerPage.value) {
        const chunk = props.dataset.slice(i, i + rowsPerPage.value);
        result.push(chunk);
      }
      currentPage.value = result[0];
      _currentPageIndex.value = 0;
      return result;
    });
    const _currentPage = ref([]);
    const currentPage = computed({
      get() {
        return _currentPage.value;
      },
      set(newValue) {
        _currentPage.value = newValue;
        emit("update:page", newValue);
      }
    });
    const _currentPageIndex = ref(0);
    const currentPageIndex = computed({
      get() {
        return _currentPageIndex.value;
      },
      set(newIndex) {
        _currentPageIndex.value = newIndex;
        if (pages.value) {
          currentPage.value = pages.value[newIndex];
        }
      }
    });
    const paginatorText = computed(() => {
      var _a, _b;
      const cIdx = currentPageIndex.value;
      const rpp = rowsPerPage.value;
      const tot = (_b = (_a = props.dataset) == null ? void 0 : _a.length) != null ? _b : 0;
      const firstIndex = cIdx * rpp + 1;
      const lastIndex = Math.min(cIdx * rpp + rpp, tot);
      return t("showing-page-of-n", [firstIndex, lastIndex, tot]);
    });
    const arrayRange = (start, stop, step) => Array.from({ length: (stop - start) / step + 1 }, (value, index) => start + index * step);
    const visiblePageButtons = computed(() => {
      if (pages.value.length < 3) {
        return arrayRange(0, pages.value.length - 1, 1);
      }
      if (currentPageIndex.value === 0) {
        return arrayRange(0, 2, 1);
      }
      const totalPages = pages.value.length;
      if (currentPageIndex.value === totalPages - 1) {
        return arrayRange(totalPages - 3, totalPages - 1, 1);
      }
      return arrayRange(currentPageIndex.value - 1, currentPageIndex.value + 1, 1);
    });
    function goToPage(index) {
      currentPageIndex.value = index;
    }
    function firstPage() {
      currentPageIndex.value = 0;
    }
    function prevPage() {
      if (currentPageIndex.value !== 0) {
        currentPageIndex.value -= 1;
      }
    }
    function nextPage() {
      if (currentPageIndex.value !== pages.value.length - 1) {
        currentPageIndex.value += 1;
      }
    }
    function lastPage() {
      if (currentPageIndex.value !== pages.value.length - 1) {
        currentPageIndex.value = pages.value.length - 1;
      }
    }
    return (_ctx, _cache) => {
      return showPaginator.value ? (openBlock(), createElementBlock("div", _hoisted_1$3, [
        createBaseVNode("div", _hoisted_2$3, [
          createBaseVNode("span", _hoisted_3$2, toDisplayString(unref(t)("rows-per-page")), 1),
          createVNode(Dropdown, {
            modelValue: rowsPerPage.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => rowsPerPage.value = $event),
            items: rowsPerPageOptions
          }, null, 8, ["modelValue"])
        ]),
        createBaseVNode("div", _hoisted_4$2, toDisplayString(paginatorText.value), 1),
        createBaseVNode("div", _hoisted_5$2, [
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === 0 }]),
            part: "paginator-button",
            onClick: withModifiers(firstPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).doubleChevronLeft,
              alt: "First page"
            }, null, 8, ["src"])
          ], 10, _hoisted_6$1),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === 0 }]),
            part: "paginator-button",
            onClick: withModifiers(prevPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).chevronLeft,
              alt: "Previous page"
            }, null, 8, ["src"])
          ], 10, _hoisted_7$1),
          (openBlock(true), createElementBlock(Fragment, null, renderList(visiblePageButtons.value, (value) => {
            return openBlock(), createElementBlock("div", {
              key: value,
              class: normalizeClass(["paginator-button", { selected: value === currentPageIndex.value }]),
              part: "paginator-button",
              onClick: withModifiers(($event) => goToPage(value), ["prevent"])
            }, toDisplayString(value + 1), 11, _hoisted_8$1);
          }), 128)),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === pages.value.length - 1 }]),
            part: "paginator-button",
            onClick: withModifiers(nextPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).chevronRight,
              alt: "Next page"
            }, null, 8, ["src"])
          ], 10, _hoisted_9$1),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === pages.value.length - 1 }]),
            part: "paginator-button",
            onClick: withModifiers(lastPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).doubleChevronRight,
              alt: "Last page"
            }, null, 8, ["src"])
          ], 10, _hoisted_10$1)
        ])
      ])) : createCommentVNode("", true);
    };
  }
});
var ActionType = /* @__PURE__ */ ((ActionType2) => {
  ActionType2["default"] = "DEFAULT";
  ActionType2["danger"] = "DANGER";
  return ActionType2;
})(ActionType || {});
const _hoisted_1$2 = { class: "action-menu" };
const _hoisted_2$2 = ["onMousedown"];
const _sfc_main$2 = defineComponent({
  __name: "ActionMenu",
  props: {
    actions: {}
  },
  setup(__props) {
    const dropdownVisible = ref(false);
    function toggleDropdown(visible) {
      if (visible === void 0) {
        dropdownVisible.value = !dropdownVisible.value;
      } else {
        dropdownVisible.value = visible;
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$2, [
        createBaseVNode("div", {
          class: "menu-icon",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => toggleDropdown(), ["prevent"])),
          onFocusout: _cache[1] || (_cache[1] = withModifiers(($event) => toggleDropdown(false), ["prevent"])),
          tabindex: "0"
        }, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).ellipsis,
            alt: "Action menu"
          }, null, 8, ["src"])
        ], 32),
        createBaseVNode("div", {
          class: normalizeClass(["menu-dropdown", { collapsed: !dropdownVisible.value }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action) => {
            return openBlock(), createElementBlock("div", {
              class: normalizeClass(["menu-item", { danger: action.type === unref(ActionType).danger }]),
              key: action.displayName,
              onMousedown: ($event) => action.action()
            }, toDisplayString(action.displayName), 43, _hoisted_2$2);
          }), 128))
        ], 2)
      ]);
    };
  }
});
const _hoisted_1$1 = {
  class: "passage-table-header-row",
  part: "passage-table-header-row"
};
const _hoisted_2$1 = {
  key: 0,
  class: "passage-table-header-cell passage-expansion-cell",
  part: "passage-table-header-cell"
};
const _hoisted_3$1 = /* @__PURE__ */ createBaseVNode("th", {
  class: "passage-table-header-cell passage-action-menu-cell",
  part: "passage-table-header-cell"
}, null, -1);
const _hoisted_4$1 = {
  class: "passage-table-row",
  part: "passage-table-row"
};
const _hoisted_5$1 = ["onClick"];
const _hoisted_6 = {
  colspan: 3,
  class: "passage-table-cell",
  part: "passage-table-cell"
};
const _hoisted_7 = { class: "expanded-content" };
const _hoisted_8 = { class: "expanded-label" };
const _hoisted_9 = {
  key: 1,
  class: "passage-table-empty"
};
const _hoisted_10 = ["colspan"];
const _hoisted_11 = { class: "title secondary-title" };
const _sfc_main$1 = defineComponent({
  __name: "SimpleDataTable",
  props: {
    dataset: {},
    headers: {},
    columns: {},
    mobileBreakpoint: {},
    actions: {}
  },
  setup(__props) {
    const props = __props;
    const page = ref();
    const { t } = useLocale();
    const tableContainer = ref();
    const resizeObserver = new ResizeObserver(() => {
      checkMobile();
    });
    const isMobile = ref(false);
    function checkMobile() {
      if (tableContainer.value === void 0) {
        return;
      }
      const tableWidth = tableContainer.value.getBoundingClientRect().width;
      isMobile.value = tableWidth < props.mobileBreakpoint;
    }
    const expandedRows = ref([]);
    function getParentRow(event) {
      if (event.target == null) {
        return void 0;
      }
      const tr = event.target;
      const previousRow = tr.previousSibling;
      if (previousRow === null || previousRow === void 0) {
        return void 0;
      }
      return previousRow;
    }
    function onMouseEnter(event) {
      const parentRow = getParentRow(event);
      if (parentRow === void 0) {
        return;
      }
      parentRow.className = "passage-table-row passage-table-row-hover";
    }
    function onMouseLeave(event) {
      const parentRow = getParentRow(event);
      if (parentRow === void 0) {
        return;
      }
      parentRow.className = "passage-table-row";
    }
    watch(page, () => {
      if (page.value === void 0) {
        return;
      }
      expandedRows.value = page.value.map(() => false);
    });
    function toggleExpansion(index) {
      expandedRows.value[index] = !expandedRows.value[index];
    }
    function getActionsForItem(item) {
      var _a;
      if (props.actions === void 0) {
        return [];
      }
      return (_a = props.actions) == null ? void 0 : _a.map((tableAction) => {
        return {
          displayName: tableAction.displayName,
          type: tableAction.type,
          action: () => {
            tableAction.action(item);
          }
        };
      });
    }
    onMounted(() => {
      checkMobile();
      if (tableContainer.value) {
        resizeObserver.observe(tableContainer.value);
      }
    });
    onUnmounted(() => {
      resizeObserver.disconnect();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("table", {
          class: "passage-table",
          ref_key: "tableContainer",
          ref: tableContainer,
          part: "passage-table"
        }, [
          createBaseVNode("tbody", null, [
            createBaseVNode("tr", _hoisted_1$1, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(isMobile.value ? [_ctx.headers[0]] : _ctx.headers, (header) => {
                return openBlock(), createElementBlock("th", {
                  key: header,
                  class: "passage-table-header-cell",
                  part: "passage-table-header-cell"
                }, toDisplayString(header), 1);
              }), 128)),
              isMobile.value ? (openBlock(), createElementBlock("th", _hoisted_2$1)) : createCommentVNode("", true),
              _hoisted_3$1
            ]),
            page.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(page.value, (item, index) => {
              return openBlock(), createElementBlock(Fragment, { key: index }, [
                createBaseVNode("tr", _hoisted_4$1, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(isMobile.value ? [_ctx.columns[0]] : _ctx.columns, (column) => {
                    return openBlock(), createElementBlock("td", {
                      key: column,
                      class: normalizeClass(["passage-table-cell", { expanded: isMobile.value && expandedRows.value[index] }]),
                      part: "passage-table-cell"
                    }, [
                      renderSlot(_ctx.$slots, column, {
                        value: item[column],
                        item
                      }, () => [
                        createTextVNode(toDisplayString(item[column]), 1)
                      ])
                    ], 2);
                  }), 128)),
                  isMobile.value ? (openBlock(), createElementBlock("td", {
                    key: 0,
                    class: normalizeClass(["passage-table-cell passage-expansion-cell", { expanded: isMobile.value && expandedRows.value[index] }]),
                    part: "passage-table-cell",
                    onClick: withModifiers(($event) => toggleExpansion(index), ["prevent"])
                  }, [
                    createVNode(unref(InlineSvg), {
                      class: normalizeClass(["table-chevron", { expanded: expandedRows.value[index] }]),
                      src: unref(Icons).tableChevronDown,
                      alt: "Expand row"
                    }, null, 8, ["src", "class"])
                  ], 10, _hoisted_5$1)) : createCommentVNode("", true),
                  createBaseVNode("td", {
                    class: normalizeClass(["passage-table-cell passage-action-menu-cell", { expanded: isMobile.value && expandedRows.value[index] }]),
                    part: "passage-table-cell"
                  }, [
                    createVNode(_sfc_main$2, {
                      actions: getActionsForItem(item)
                    }, null, 8, ["actions"])
                  ], 2)
                ]),
                isMobile.value && expandedRows.value[index] ? (openBlock(), createElementBlock("tr", {
                  key: 0,
                  class: "passage-expansion-row",
                  part: "passage-table-expansion-row",
                  onMouseenter: onMouseEnter,
                  onMouseleave: onMouseLeave
                }, [
                  createBaseVNode("td", _hoisted_6, [
                    createBaseVNode("div", _hoisted_7, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columns.slice(1), (column, index2) => {
                        return openBlock(), createElementBlock("div", {
                          class: "expanded-item",
                          key: column
                        }, [
                          createBaseVNode("div", _hoisted_8, toDisplayString(_ctx.headers[index2 + 1]), 1),
                          createBaseVNode("span", null, [
                            renderSlot(_ctx.$slots, column, {
                              value: item[column],
                              item
                            }, () => [
                              createTextVNode(toDisplayString(item[column]), 1)
                            ])
                          ])
                        ]);
                      }), 128))
                    ])
                  ])
                ], 32)) : createCommentVNode("", true)
              ], 64);
            }), 128)) : (openBlock(), createElementBlock("tr", _hoisted_9, [
              createBaseVNode("td", {
                class: "passage-table-empty-cell",
                colspan: isMobile.value ? 3 : _ctx.columns.length + 1
              }, [
                createBaseVNode("div", _hoisted_11, toDisplayString(unref(t)("no-devices-found")), 1),
                createBaseVNode("div", null, toDisplayString(unref(t)("there-are-no-devices-registered")), 1)
              ], 8, _hoisted_10)
            ]))
          ])
        ], 512),
        createVNode(_sfc_main$3, {
          dataset: _ctx.dataset,
          page: page.value,
          "onUpdate:page": _cache[0] || (_cache[0] = ($event) => page.value = $event)
        }, null, 8, ["dataset", "page"])
      ]);
    };
  }
});
const _hoisted_1 = {
  class: "flex-row flex-end",
  style: { "margin-bottom": "30px" }
};
const _hoisted_2 = { class: "title secondary-title" };
const _hoisted_3 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_4 = {
  class: "flex-row",
  style: { "align-items": "center" }
};
const _hoisted_5 = {
  key: 0,
  class: "current-device"
};
const _sfc_main = defineComponent({
  __name: "DevicesTable",
  props: {
    appId: {},
    userInfo: {},
    refreshDevices: { type: Function },
    webauthnAllowed: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const tableContainerRef = ref();
    const minHeight = ref(0);
    const showRevokeModal = ref(false);
    const showAddModal = ref(false);
    const showEditModal = ref(false);
    const orderedDeviceList = computed(() => {
      if (props.userInfo === void 0) {
        return [];
      }
      const arrayCopy = props.userInfo.webauthn_devices.map((device) => device);
      return arrayCopy.sort((a, b) => {
        return new Date(a.last_login_at) > new Date(b.last_login_at) ? -1 : 1;
      });
    });
    function calculateMinHeight() {
      if (props.userInfo === void 0) {
        minHeight.value = 0;
        return;
      }
      if (tableContainerRef.value === null || tableContainerRef.value === void 0) {
        minHeight.value = 0;
        return;
      }
      if (props.userInfo.webauthn_devices.length > 5) {
        const containerHeight = tableContainerRef.value.getBoundingClientRect().height;
        minHeight.value = Math.ceil(containerHeight);
      }
    }
    const selectedDevice = ref();
    function editPasskey(item) {
      selectedDevice.value = item;
      showEditModal.value = true;
    }
    function revokePasskey(item) {
      selectedDevice.value = item;
      showRevokeModal.value = true;
    }
    const tableActions = computed(() => [
      {
        displayName: t("edit-device"),
        type: ActionType.default,
        action: editPasskey
      },
      {
        displayName: t("revoke-device"),
        type: ActionType.danger,
        action: revokePasskey
      }
    ]);
    onUpdated(() => {
      calculateMinHeight();
    });
    onMounted(() => __async(this, null, function* () {
      calculateMinHeight();
    }));
    const currentDevice = computed(() => {
      var _a, _b;
      if (props.userInfo === void 0) {
        return void 0;
      }
      const psgCredObj = localStorage.getItem("psg_cred_obj");
      if (!psgCredObj) {
        return void 0;
      }
      const psgCredID = JSON.parse(psgCredObj)[(_b = (_a = props.userInfo) == null ? void 0 : _a.id) != null ? _b : ""];
      return props.userInfo.webauthn_devices.find((device) => device.cred_id === psgCredID);
    });
    const refreshing = ref(false);
    function actionFinished() {
      return __async(this, null, function* () {
        selectedDevice.value = void 0;
        refreshing.value = true;
        yield props.refreshDevices();
        refreshing.value = false;
      });
    }
    return (_ctx, _cache) => {
      var _a;
      return openBlock(), createElementBlock("div", {
        class: "table-container",
        style: normalizeStyle(`min-height: ${minHeight.value}px`),
        ref_key: "tableContainerRef",
        ref: tableContainerRef
      }, [
        refreshing.value ? (openBlock(), createBlock(_sfc_main$5, {
          key: 0,
          active: refreshing.value
        }, null, 8, ["active"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_1, [
          createBaseVNode("div", _hoisted_2, toDisplayString(unref(t)("my-passkeys")), 1),
          _hoisted_3,
          _ctx.userInfo && _ctx.webauthnAllowed ? (openBlock(), createElementBlock("button", {
            key: 0,
            part: "button button-secondary",
            class: "button is-secondary is-modal",
            onClick: _cache[0] || (_cache[0] = withModifiers(($event) => showAddModal.value = true, ["prevent"]))
          }, toDisplayString(unref(t)("add-device")), 1)) : createCommentVNode("", true)
        ]),
        createVNode(_sfc_main$1, {
          dataset: orderedDeviceList.value,
          headers: [unref(t)("name"), unref(t)("added-time"), unref(t)("last-login")],
          columns: ["friendly_name", "created_at", "last_login_at"],
          "mobile-breakpoint": 500,
          actions: tableActions.value
        }, {
          friendly_name: withCtx(({ value, item }) => {
            var _a2;
            return [
              createBaseVNode("div", _hoisted_4, [
                createTextVNode(toDisplayString(value) + " ", 1),
                ((_a2 = currentDevice.value) == null ? void 0 : _a2.id) === item.id ? (openBlock(), createElementBlock("div", _hoisted_5, toDisplayString(unref(t)("current")), 1)) : createCommentVNode("", true)
              ])
            ];
          }),
          created_at: withCtx(({ value }) => [
            createTextVNode(toDisplayString(unref(dayjs)(value).format("MMM D, YYYY")), 1)
          ]),
          last_login_at: withCtx(({ value }) => [
            createTextVNode(toDisplayString(unref(dayjs)(value).format("MMM D, YYYY")), 1)
          ]),
          _: 1
        }, 8, ["dataset", "headers", "actions"]),
        createVNode(AddDevice, {
          active: showAddModal.value,
          "onUpdate:active": _cache[1] || (_cache[1] = ($event) => showAddModal.value = $event),
          "app-id": _ctx.appId,
          onDialogClose: actionFinished
        }, null, 8, ["active", "app-id"]),
        selectedDevice.value ? (openBlock(), createBlock(RevokeDevice, {
          key: 1,
          active: showRevokeModal.value,
          "onUpdate:active": _cache[2] || (_cache[2] = ($event) => showRevokeModal.value = $event),
          device: selectedDevice.value,
          currentDeviceId: (_a = currentDevice.value) == null ? void 0 : _a.id,
          onDialogClose: actionFinished,
          "app-id": _ctx.appId
        }, null, 8, ["active", "device", "currentDeviceId", "app-id"])) : createCommentVNode("", true),
        createVNode(_sfc_main$8, {
          active: showEditModal.value,
          "onUpdate:active": _cache[3] || (_cache[3] = ($event) => showEditModal.value = $event),
          "app-id": _ctx.appId,
          deviceObject: selectedDevice.value,
          onDialogClose: actionFinished
        }, null, 8, ["active", "app-id", "deviceObject"])
      ], 4);
    };
  }
});
function useCurrentUser(appInfo) {
  const loading = ref(true);
  const error = ref(void 0);
  const userInfo = ref(void 0);
  function execute() {
    return __async(this, null, function* () {
      try {
        loading.value = true;
        const passageUser = new Y(appInfo.id).getCurrentUser();
        if (passageUser) {
          userInfo.value = yield passageUser.userInfo();
          if (userInfo.value !== void 0 && userInfo.value.user_metadata === null) {
            userInfo.value.user_metadata = {};
          }
          transformMetadata();
        }
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  onMounted(() => {
    execute();
  });
  function refreshDevices() {
    return __async(this, null, function* () {
      if (!userInfo.value) {
        return;
      }
      try {
        const passageUser = new Y(appInfo.id).getCurrentUser();
        userInfo.value.webauthn_devices = yield passageUser.listDevices();
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  function refreshMetadata() {
    return __async(this, null, function* () {
      var _a;
      if (!userInfo.value) {
        return;
      }
      try {
        const passageUser = new Y(appInfo.id).getCurrentUser();
        userInfo.value.user_metadata = (_a = yield passageUser.getMetadata()) != null ? _a : {};
        transformMetadata();
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  function transformMetadata() {
    if (appInfo === void 0) {
      return;
    }
    appInfo.user_metadata_schema.forEach((schema) => {
      if (!userInfo.value || !userInfo.value.user_metadata) {
        return;
      }
      const metadataValue = userInfo.value.user_metadata[schema.field_name];
      if (schema.type === ce.DATE && metadataValue) {
        userInfo.value.user_metadata[schema.field_name] = dayjs(metadataValue).format("MM/DD/YYYY");
      }
    });
  }
  return {
    userInfo,
    loading,
    error,
    refreshDevices,
    refreshMetadata
  };
}
function useProfileElementSetup(props) {
  function storeProps() {
    const { updateDefaultCountryCode } = useDefaultCountryCode();
    updateDefaultCountryCode(props.defaultCountryCode);
  }
  storeProps();
  onBeforeUpdate(() => {
    storeProps();
  });
  const { languageLoading } = useStoreLocale(props);
  const containerRef = ref();
  useIntlTelInput(containerRef);
  return {
    languageLoading,
    containerRef
  };
}
export { _sfc_main as _, _sfc_main$5 as a, useProfileElementSetup as b, useCurrentUser as u };
//# 
