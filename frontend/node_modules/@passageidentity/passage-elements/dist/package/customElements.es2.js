var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { f as ref, g as watch, d as defineComponent, h as useLocale, i as computed, j as onMounted, k as oe, l as onBeforeUnmount, c as createElementBlock, w as withDirectives, v as vShow, a as createBaseVNode, m as createTextVNode, t as toDisplayString, u as unref, n as withModifiers, p as normalizeClass, q as vModelText, r as renderSlot, x as normalizeStyle, y as createCommentVNode, z as isStringNullish, o as openBlock, Y, E, A as te, B as readonly, C as useAppId, D as ue, U as UAParser, b as createBlock, e as withCtx, F as createVNode, G as h, H as onBeforeMount, _ as _export_sfc, I as Icons, J as InlineSvg, K as isRef, L as useDefaultCountryCode, T, M as Transition, N as Fragment, O as vModelDynamic, P as renderList, Q as useAddDevice, R as reactive, S as useAppInfo, V as normalizeProps, W as mergeProps, X as resolveDynamicComponent, Z as onBeforeUpdate, $ as useStoreLocale, a0 as useIntlTelInput } from "./customElements.es.js";
import { i as intlTelInput, t as transformMetadata, L as LayoutType, U as UserMetadata } from "./customElements.es3.js";
var IdentifierType = /* @__PURE__ */ ((IdentifierType2) => {
  IdentifierType2["phone"] = "PHONE";
  IdentifierType2["email"] = "EMAIL";
  return IdentifierType2;
})(IdentifierType || {});
function useAutofocusButton() {
  const autofocusButton = ref();
  function autofocus() {
    if (autofocusButton.value === void 0 || autofocusButton.value === null) {
      return;
    }
    autofocusButton.value.focus();
  }
  watch(autofocusButton, () => {
    autofocus();
  });
  return {
    autofocusButton
  };
}
function inputStyles() {
  const css = `
      .psg-input{
        -webkit-appearance: none;
        -moz-appearance: none;
        box-sizing: border-box;
        color: var(--passage-body-text-color, #000000);
        font-family: var(--passage-body-font-family, 'Helvetica');
        font-size: var(--passage-body-font-size, 14px);
        font-weight: var(--passage-body-font-weight, 400);

        min-height: 40px;
        width: 100%;

        padding-left: 10px;
        padding-right: 10px;
        margin: 0;

        color: var(--app-text);

        background-color: var(--passage-container-background-color, #ffffff);
        border-style: solid;
        border-color: var(--passage-control-border-color, #d7d7d7);
        border-width: 1px;
        border-radius: var(--passage-control-border-radius, 5px);

        transition: all 0.3s;

        text-overflow: ellipsis;
      }

      .psg-input:focus{
        outline: none;
        box-shadow: none !important;
        border-color: var(--passage-body-text-color, #000000);
      }

      .psg-input:active{
        outline: none;
        box-shadow: none !important;
        border-color: var(--passage-body-text-color, #000000);
      }

      .psg-input.has-error{
        border-color: var(--passage-error-color, #dd0031);
      }
      .psg-input.is-danger{
        border-color: var(--passage-error-color, #dd0031);
      }
      .iti {
        width: 100%;
      }

        .iti__country-list {
            border-radius: 6px;
        }

        .iti__country {
            padding: 5px 10px;
        }

        .iti__selected-flag {
            border-top-left-radius: var(--passage-control-border-radius, 6px);
            border-bottom-left-radius: var(--passage-control-border-radius, 6px);
        }

    .iti--container {
        top: unset !important;
        left: unset !important;
    }`;
  const style = document.createElement("style");
  style.appendChild(document.createTextNode(css));
  return style;
}
function itiStyles() {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.16/css/intlTelInput.css";
  return link;
}
function otcStyles() {
  const css = `
      .psg-otp-input-container{
        margin: 0px;
        padding: 0px;
        align-items: center;
        height: auto;
        width: auto;
      }
      .psg-otp-single-input-container{
        margin: 0px;
        padding: 0px;
        height: auto;
        width: auto;
      }
      .psg-otp-input {
        width: 40px;
        height: 40px;
        padding: 0px;
        margin-left: 4px;
        margin-right: 4px;
        font-size: 24px;
        font-weight: 400;
        line-height: 29px;
        border-radius: 4px;
        border: 1px solid transparent;
        text-align: center;
        background-color: var(--passage-otp-input-background-color, #d7d7d7);
        -moz-appearance: textfield;
      }
      .psg-otp-input:read-only {
        background-color: var(--passage-otp-input-background-color, #d7d7d7);
      }
      .psg-otp-input::-webkit-inner-spin-button{
        -webkit-appearance: none;
        display: none;
        margin: 0;
      }
      .psg-otp-input::-webkit-outer-spin-button{
        -webkit-appearance: none;
        display: none;
        margin: 0;
      }
      .psg-input.has-error{
        border-color: var(--passage-error-color, #dd0031) !important;
      }
      .psg-input.is-danger {
        border-color: var(--passage-error-color, #dd0031) !important;
      }
      .psg-input:focus {
        outline: none;
        box-shadow: none !important;
        border-color: var(--passage-body-text-color, #000000);
      }
      .psg-input:active {
        outline: none;
        box-shadow: none !important;
        border-color: var(--passage-body-text-color, #000000);
      }`;
  const style = document.createElement("style");
  style.appendChild(document.createTextNode(css));
  return style;
}
const _hoisted_1$q = { class: "identifier-form" };
const _hoisted_2$h = { class: "has-text-centered" };
const _hoisted_3$f = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_4$e = ["onSubmit"];
const _hoisted_5$d = ["autocomplete", "inputmode", "placeholder", "onInput"];
const _hoisted_6$b = { class: "flex-row flex-center" };
const _hoisted_7$b = ["onClick"];
const _hoisted_8$8 = {
  key: 0,
  style: { "margin-top": "30px" },
  class: "link has-text-centered"
};
const _hoisted_9$7 = ["onClick"];
const _sfc_main$u = defineComponent({
  __name: "ValidatedIdentifierForm",
  props: {
    appId: {},
    validationError: { default: "" },
    identifier: {},
    countryCode: {},
    identifierMode: {},
    showWelcomeBack: { type: Boolean, default: false },
    conditionalUI: { type: Boolean, default: false }
  },
  emits: [
    "onSubmit",
    "update:validationError",
    "update:identifier",
    "update:countryCode",
    "update:showWelcomeBack"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const identifierParseError = ref("");
    const identifierInput = ref();
    const controlContainer = ref();
    const { autofocusButton } = useAutofocusButton();
    const showWelcomeUI = computed(() => {
      return props.showWelcomeBack;
    });
    const label = computed(() => {
      let identifierType;
      switch (props.identifierMode) {
        case oe.phone:
          identifierType = t("phone-number");
          break;
        case oe.email:
          identifierType = t("email-address");
          break;
        case oe.both:
          identifierType = t("email-or-phone-number");
          break;
      }
      return identifierType.charAt(0).toUpperCase() + identifierType.slice(1);
    });
    const placeholder = computed(() => {
      return "example@email.com";
    });
    const inputMode = computed(() => {
      if (props.identifierMode === oe.phone) {
        return "tel";
      }
      return "email";
    });
    const autocomplete = computed(() => {
      var _a;
      if (props.conditionalUI) {
        return `${inputMode.value} webauthn`;
      }
      return (_a = inputMode.value) != null ? _a : "";
    });
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        emit("update:identifier", newIdentifier);
      }
    });
    function formattedIdentifier() {
      var _a;
      if (!identifierText.value) {
        return "";
      }
      let identifier = identifierText.value;
      if (!showWelcomeUI.value) {
        identifier = isPhoneNumber() ? (_a = phoneInput == null ? void 0 : phoneInput.getNumber()) != null ? _a : "" : identifierText.value;
      }
      return identifier.trim().toLowerCase();
    }
    const error = computed(() => {
      if (!isStringNullish(props.validationError)) {
        return props.validationError;
      }
      if (!isStringNullish(identifierParseError.value)) {
        return identifierParseError.value;
      }
      return "";
    });
    function clearErrors() {
      identifierParseError.value = "";
      emit("update:validationError", "");
    }
    function checkIdentifier() {
      return __async(this, null, function* () {
        if (!validateInput()) {
          return;
        }
        const passage = new Y(props.appId);
        let identifierExists, userHasWebauthn, userHasPasskey, emailVerified, phoneVerified = false;
        let userStatus;
        let userID = "";
        try {
          const userInfo = yield passage.identifierExists(formattedIdentifier());
          if (userInfo !== null) {
            identifierExists = true;
            userHasWebauthn = userInfo.webauthn;
            userStatus = userInfo.status;
            userID = userInfo.id;
            emailVerified = userInfo.email_verified;
            phoneVerified = userInfo.phone_verified;
            userHasPasskey = userInfo.webauthn_types.includes(E.Passkey);
          } else {
            identifierExists = false;
            userHasWebauthn = false;
            userStatus = te.INACTIVE;
          }
        } catch (e) {
          let errorMessage;
          switch (props.identifierMode) {
            case oe.email:
              errorMessage = t("enter-a-valid-email-address");
              break;
            case oe.phone:
              errorMessage = t("enter-a-valid-phone-number");
              break;
            case oe.both:
              errorMessage = t("enter-a-valid-email-or-phone-number");
              break;
          }
          identifierParseError.value = errorMessage;
          return;
        }
        emit("onSubmit", {
          identifier: formattedIdentifier(),
          identifierExists,
          identifierType: isPhoneNumber() ? IdentifierType.phone : IdentifierType.email,
          userHasWebauthn,
          userStatus,
          userID,
          emailVerified,
          phoneVerified,
          userHasPasskey
        });
      });
    }
    function isEmail() {
      const emailRegEx = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return emailRegEx.test(formattedIdentifier());
    }
    function isPhoneNumber() {
      if (showWelcomeUI.value) {
        return isPhoneNumberRegex();
      }
      if (phoneInput === void 0) {
        return false;
      }
      return phoneInput.isValidNumber();
    }
    function validateInput() {
      if (formattedIdentifier() === "") {
        let message = "";
        switch (props.identifierMode) {
          case oe.phone:
            message = t("enter-a-phone-number");
            break;
          case oe.email:
            message = t("enter-an-email-address");
            break;
          case oe.both:
            message = t("enter-an-email-or-phone-number");
            break;
        }
        identifierParseError.value = message;
        return false;
      } else if (props.identifierMode === oe.email && !isEmail()) {
        identifierParseError.value = t("enter-a-valid-email-address");
        return false;
      } else if (props.identifierMode === oe.phone && !isPhoneNumber()) {
        identifierParseError.value = t("enter-a-valid-phone-number");
        return false;
      } else if (props.identifierMode === oe.both && !isPhoneNumber() && !isEmail()) {
        identifierParseError.value = t("enter-a-valid-email-or-phone-number");
        return false;
      }
      return true;
    }
    let phoneInput;
    function showCountryCode() {
      if (phoneInput !== void 0) {
        return;
      }
      identifierInput.value.addEventListener("countrychange", () => {
        var _a;
        emit("update:countryCode", (_a = phoneInput == null ? void 0 : phoneInput.getSelectedCountryData().iso2) != null ? _a : "");
      });
      phoneInput = intlTelInput(identifierInput.value, {
        initialCountry: props.countryCode,
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
        dropdownContainer: controlContainer.value,
        autoPlaceholder: "aggressive"
      });
      identifierInput.value.focus();
    }
    function hideCountryCode() {
      if (phoneInput === void 0) {
        return;
      }
      phoneInput.destroy();
      phoneInput = void 0;
      if (identifierInput.value) {
        identifierInput.value.focus();
      }
    }
    onMounted(() => {
      if (props.conditionalUI) {
        moveInput();
      }
      if (props.identifierMode === oe.phone) {
        showCountryCode();
      }
    });
    function isPhoneNumberRegex() {
      const phoneNumberRegex = /^\+$|^\+?[0-9,(,),\-, ]+$/;
      return phoneNumberRegex.test(identifierText.value.trim());
    }
    if (props.identifierMode === oe.both) {
      watch(identifierText, () => {
        if (isPhoneNumberRegex()) {
          showCountryCode();
        } else {
          hideCountryCode();
        }
      });
    }
    const countryCodeText = computed(() => {
      return props.countryCode;
    });
    watch(countryCodeText, (newValue) => {
      phoneInput == null ? void 0 : phoneInput.setCountry(newValue);
    });
    function switchAccount() {
      emit("update:showWelcomeBack", false);
      identifierText.value = "";
    }
    const identifierForm = ref();
    function moveInput() {
      const parent = identifierForm.value.getRootNode().host;
      if (parent !== void 0) {
        identifierForm.value.appendChild(inputStyles());
        identifierForm.value.appendChild(itiStyles());
        parent.appendChild(identifierForm.value);
      }
    }
    function cleanupInput() {
      identifierForm.value.remove();
    }
    onBeforeUnmount(() => {
      cleanupInput();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$q, [
        withDirectives(createBaseVNode("div", _hoisted_2$h, [
          createTextVNode(toDisplayString(unref(t)("welcome-back-sign-in-as")), 1),
          _hoisted_3$f,
          createBaseVNode("strong", null, toDisplayString(identifierText.value), 1)
        ], 512), [
          [vShow, _ctx.showWelcomeBack]
        ]),
        withDirectives(createBaseVNode("div", null, [
          createBaseVNode("div", {
            class: "label",
            ref: "labelRef"
          }, toDisplayString(label.value), 513),
          createBaseVNode("form", {
            ref_key: "identifierForm",
            ref: identifierForm,
            slot: "loginInput",
            onSubmit: withModifiers(checkIdentifier, ["prevent"])
          }, [
            withDirectives(createBaseVNode("input", {
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => identifierText.value = $event),
              type: "text",
              class: normalizeClass(["input psg-input", { "is-danger": error.value }]),
              part: "input",
              autocomplete: autocomplete.value,
              inputmode: inputMode.value,
              id: "identifier",
              placeholder: placeholder.value,
              onInput: withModifiers(clearErrors, ["prevent"]),
              "data-test": "identifier-input",
              ref_key: "identifierInput",
              ref: identifierInput
            }, null, 42, _hoisted_5$d), [
              [vModelText, identifierText.value]
            ])
          ], 40, _hoisted_4$e),
          renderSlot(_ctx.$slots, "loginInput")
        ], 512), [
          [vShow, !_ctx.showWelcomeBack]
        ]),
        createBaseVNode("div", {
          ref_key: "controlContainer",
          ref: controlContainer,
          style: { "width": "100%" }
        }, null, 512),
        createBaseVNode("div", {
          style: normalizeStyle(`text-align: ${showWelcomeUI.value ? "center" : "left"};`),
          class: "help is-danger error-message",
          "data-test": "validation-error"
        }, toDisplayString(error.value), 5),
        renderSlot(_ctx.$slots, "metadataFields"),
        createBaseVNode("div", _hoisted_6$b, [
          createBaseVNode("button", {
            class: "button is-primary",
            part: "button",
            "data-test": "continue-button",
            ref_key: "autofocusButton",
            ref: autofocusButton,
            onClick: withModifiers(checkIdentifier, ["prevent"])
          }, toDisplayString(unref(t)("continue")), 9, _hoisted_7$b)
        ]),
        showWelcomeUI.value ? (openBlock(), createElementBlock("div", _hoisted_8$8, [
          createBaseVNode("a", {
            onClick: withModifiers(switchAccount, ["prevent"]),
            role: "button",
            "data-test": "register-link"
          }, toDisplayString(unref(t)("switch-account")), 9, _hoisted_9$7)
        ])) : createCommentVNode("", true)
      ]);
    };
  }
});
var OnEventType = /* @__PURE__ */ ((OnEventType2) => {
  OnEventType2["onLoaded"] = "onLoaded";
  OnEventType2["onRegisterDevice"] = "onRegisterDevice";
  OnEventType2["onVerifyIdentity"] = "onVerifyIdentity";
  OnEventType2["onMagicLinkLogin"] = "onMagicLinkLogin";
  OnEventType2["onMagicLinkRegister"] = "onMagicLinkRegister";
  OnEventType2["onMagicLinkActivated"] = "onMagicLinkActivated";
  OnEventType2["onMagicLinkActivateSuccess"] = "onMagicLinkActivateSuccess";
  OnEventType2["onOneTimePasscodeLogin"] = "onOneTimePasscodeLogin";
  OnEventType2["onOneTimePasscodeRegister"] = "onOneTimePasscodeRegister";
  OnEventType2["onOneTimePasscodeActivated"] = "onOneTimePasscodeActivated";
  OnEventType2["onOneTimePasscodeActivateSuccess"] = "onOneTimePasscodeActivateSuccess";
  return OnEventType2;
})(OnEventType || {});
const defaultBeforeAuth = () => {
  return true;
};
const defaultOnSuccess = (authResult2) => {
  window.location.href = authResult2.redirect_url;
};
const defaultOnEvent = () => {
  return;
};
const beforeAuth = ref(defaultBeforeAuth);
const onSuccess = ref(defaultOnSuccess);
const onEvent = ref(defaultOnEvent);
function setBeforeAuth(newBeforeAuth) {
  if (newBeforeAuth === void 0) {
    beforeAuth.value = defaultBeforeAuth;
    return;
  }
  beforeAuth.value = newBeforeAuth;
}
function setOnSuccess(newOnSuccess) {
  if (newOnSuccess === void 0) {
    onSuccess.value = defaultOnSuccess;
    return;
  }
  onSuccess.value = newOnSuccess;
}
function setOnEvent(newOnEvent) {
  if (newOnEvent === void 0) {
    onEvent.value = defaultOnEvent;
    return;
  }
  onEvent.value = newOnEvent;
}
function useCallbacks() {
  return {
    beforeAuth: readonly(beforeAuth),
    onSuccess: readonly(onSuccess),
    onEvent: readonly(onEvent),
    setBeforeAuth,
    setOnSuccess,
    setOnEvent
  };
}
const storageKey = "psg_last_login";
function getLastLogin() {
  return localStorage.getItem(storageKey);
}
function storeLastLogin(identiferOrUserInfo) {
  return __async(this, null, function* () {
    if (identiferOrUserInfo && typeof identiferOrUserInfo === "string") {
      localStorage.setItem(storageKey, identiferOrUserInfo);
      return;
    }
    let currentInfo = identiferOrUserInfo;
    if (identiferOrUserInfo === void 0) {
      const { appId } = useAppId();
      const passage = new Y(appId.value);
      currentInfo = yield passage.getCurrentUser().userInfo();
    }
    if (currentInfo === void 0) {
      return;
    }
    localStorage.setItem(storageKey, currentInfo.email ? currentInfo.email : currentInfo.phone);
  });
}
function createdUserEventHandler(payload, eventHandlerState) {
  const { webauthnAllowed, appInfo, router } = eventHandlerState;
  const { identifier, identifierType } = payload;
  const { emitEvent: emitEvent2 } = useAuthEvent();
  if (!webauthnAllowed || appInfo.require_identifier_verification) {
    emitEvent2({
      type: AuthEventType.FallbackAuth,
      payload: {
        identifier,
        identifierType,
        identifierVerifying: appInfo.require_identifier_verification,
        userIsRegistering: true,
        userInitiated: false
      }
    });
    return;
  }
  useCallbacks().onEvent.value(OnEventType.onRegisterDevice, { identifier });
  router.push(RegisterDeviceRoute, { identifier, identifierType, appInfo });
}
function changeIdenfitierEventHandler(eventHandlerState) {
  const { appInfo, router, browserFeatures } = eventHandlerState;
  router.push(router.homeRoute, { appInfo, conditionalUI: browserFeatures.conditionalUI, changeEmail: true });
}
function isWebauthnGetMonkeypatched() {
  const isGetNative = navigator.credentials.get.toString().includes("[native code]");
  return !isGetNative;
}
function loginUserEventHandler(payload, eventHandlerState) {
  return __async(this, null, function* () {
    const { browserFeatures, appInfo, router } = eventHandlerState;
    const { appId } = useAppId();
    const passage = new Y(appId.value);
    const { emitEvent: emitEvent2 } = useAuthEvent();
    const { identifier, identifierType, userHasPasskey, userHasWebauthn, emailVerified, phoneVerified, userID } = payload;
    const noFallback = appInfo.auth_fallback_method === ue.None;
    if (!userHasWebauthn && noFallback) {
      router.push(LoginNotSupportedRoute);
      return;
    }
    const verificationRequired = userNeedsToVerify(appInfo, emailVerified, phoneVerified, identifierType);
    const canTryPlaform = browserFeatures.platform && userHasWebauthn && passage.credIDExists(userID);
    const canTryPasskey = browserFeatures.syncedCredential && userHasPasskey;
    const tryWebauthnWithNoFallback = browserFeatures.platform && noFallback;
    const tryNonNativeWebauthn = userHasPasskey && browserFeatures.platform && isWebauthnGetMonkeypatched();
    const canTryWebAuthn = !verificationRequired && (canTryPasskey || canTryPlaform || tryWebauthnWithNoFallback || tryNonNativeWebauthn);
    if (canTryWebAuthn) {
      useCallbacks().onEvent.value(OnEventType.onVerifyIdentity);
      router.push(WebauthnSignInRoute, { identifier, identifierType, appInfo });
    } else {
      emitEvent2({
        type: AuthEventType.FallbackAuth,
        payload: {
          identifier,
          identifierType,
          userInitiated: false,
          identifierVerifying: verificationRequired,
          setupNewDevice: browserFeatures.platform
        }
      });
    }
  });
}
function userNeedsToVerify(appInfo, emailVerified, phoneVerified, identifierType) {
  if (appInfo.require_identifier_verification) {
    if (identifierType === IdentifierType.email && !emailVerified || identifierType === IdentifierType.phone && !phoneVerified) {
      return true;
    }
  }
  return false;
}
function fallbackAuthEventHandler(payload, eventHandlerState) {
  const { authState, appInfo, router } = eventHandlerState;
  authState.userInitiatedFallback = payload.userInitiated;
  switch (appInfo.auth_fallback_method) {
    case ue.LoginCode:
      otpCallback(payload);
      router.push(OneTimePasscodeRoute, payload);
      break;
    case ue.MagicLink:
      magicLinkCallback(payload);
      router.push(MagicLinkRoute, payload);
      break;
    case ue.None:
      router.push(DisableFallbacksRoute);
      break;
  }
}
function magicLinkCallback(payload) {
  const { identifier, userIsRegistering } = payload;
  if (userIsRegistering) {
    useCallbacks().onEvent.value(OnEventType.onMagicLinkRegister, { identifier });
  } else {
    useCallbacks().onEvent.value(OnEventType.onMagicLinkLogin);
  }
}
function otpCallback(payload) {
  const { identifier, userIsRegistering } = payload;
  if (userIsRegistering) {
    useCallbacks().onEvent.value(OnEventType.onOneTimePasscodeRegister, { identifier });
  } else {
    useCallbacks().onEvent.value(OnEventType.onOneTimePasscodeLogin);
  }
}
function authSuccessEventHandler(payload) {
  return __async(this, null, function* () {
    if (isStringNullish(payload.authResult.auth_token) || isStringNullish(payload.authResult.redirect_url)) {
      return;
    }
    yield storeLastLogin(payload.identifier);
    useCallbacks().onSuccess.value(payload.authResult);
  });
}
function fallbackAuthSuccessEventHandler(payload, eventHandlerState) {
  const { webauthnAllowed, authState, router } = eventHandlerState;
  if (webauthnAllowed && !authState.userInitiatedFallback) {
    router.push(AddDeviceRoute, payload);
    return;
  }
  useAuthEvent().emitEvent({
    type: AuthEventType.AuthSuccess,
    payload
  });
}
function isSafariVersionLessThan164() {
  const userAgent = new UAParser();
  return userAgent.getBrowser().name == "Safari" && parseFloat(userAgent.getBrowser().version || "") < 16.4;
}
var AuthEventType = /* @__PURE__ */ ((AuthEventType2) => {
  AuthEventType2["CreatedUser"] = "CreatedUser";
  AuthEventType2["ChangeIdentifier"] = "ChangeIdentifier";
  AuthEventType2["LoginUser"] = "LoginUser";
  AuthEventType2["FallbackAuth"] = "FallbackAuth";
  AuthEventType2["AuthSuccess"] = "AuthSuccess";
  AuthEventType2["FallbackAuthSuccess"] = "FallbackAuthSuccess";
  return AuthEventType2;
})(AuthEventType || {});
class EventHandler {
  constructor(appInfo, router) {
    this.appInfo = appInfo;
    this.router = router;
    this.authState = {
      userInitiatedFallback: false
    };
    this.authOriginValid = false;
    this.browserFeatures = {
      securityKey: false,
      platform: false,
      syncedCredential: false,
      crossDeviceCredential: false,
      conditionalUI: false,
      isAvailable: false
    };
  }
  initializeEventHandler() {
    return __async(this, null, function* () {
      const { appId } = useAppId();
      const passage = new Y(appId.value);
      this.authOriginValid = passage.checkWebauthnConfig(this.appInfo);
      if (this.authOriginValid) {
        this.browserFeatures = yield passage.getCredentialAvailable();
        if (isSafariVersionLessThan164()) {
          this.browserFeatures.conditionalUI = false;
        }
      }
      if (!this.checkMagicLink()) {
        this.router.push(this.router.homeRoute, {
          appInfo: this.appInfo,
          conditionalUI: this.browserFeatures.conditionalUI
        });
      }
    });
  }
  handleEvent(event) {
    return __async(this, null, function* () {
      switch (event.type) {
        case "CreatedUser":
          createdUserEventHandler(event.payload, this.eventHandlerState);
          break;
        case "ChangeIdentifier":
          changeIdenfitierEventHandler(this.eventHandlerState);
          break;
        case "LoginUser":
          loginUserEventHandler(event.payload, this.eventHandlerState);
          break;
        case "FallbackAuth":
          fallbackAuthEventHandler(event.payload, this.eventHandlerState);
          break;
        case "AuthSuccess":
          authSuccessEventHandler(event.payload);
          break;
        case "FallbackAuthSuccess":
          fallbackAuthSuccessEventHandler(event.payload, this.eventHandlerState);
          break;
      }
    });
  }
  get eventHandlerState() {
    return {
      appInfo: this.appInfo,
      webauthnAllowed: this.browserFeatures.platform,
      router: this.router,
      authState: this.authState,
      browserFeatures: this.browserFeatures
    };
  }
  checkMagicLink() {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let magicLink = null;
    if (urlParams.has("psg_magic_link")) {
      magicLink = urlParams.get("psg_magic_link");
    } else if (urlParams.has("psg_verify_link")) {
      magicLink = urlParams.get("psg_verify_link");
    }
    if (magicLink !== null) {
      this.router.push(ActivateMagicLinkRoute, { magicLink, webauthnAllowed: this.browserFeatures.platform });
      return true;
    }
    return false;
  }
}
let eventHandler = void 0;
function initEventHandler(appInfo, router) {
  return __async(this, null, function* () {
    eventHandler = new EventHandler(appInfo, router);
    yield eventHandler.initializeEventHandler();
  });
}
function getEventHandler() {
  return eventHandler;
}
function emitEvent(event) {
  return __async(this, null, function* () {
    return eventHandler == null ? void 0 : eventHandler.handleEvent(event);
  });
}
function useAuthEvent() {
  return {
    initEventHandler,
    getEventHandler,
    emitEvent
  };
}
const _sfc_main$t = defineComponent({
  __name: "Login",
  props: {
    canToggleLoginRegister: { type: Boolean },
    identifier: {},
    countryCode: {},
    appInfo: {},
    visible: { type: Boolean },
    conditionalUI: { type: Boolean },
    changeEmail: { type: Boolean }
  },
  emits: ["update:identifier", "update:countryCode"],
  setup(__props, { emit }) {
    const props = __props;
    const { appId } = useAppId();
    const { t } = useLocale();
    const error = ref("");
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        emit("update:identifier", newIdentifier);
      }
    });
    const countryCodeText = computed({
      get() {
        return props.countryCode;
      },
      set(newCountryCode) {
        emit("update:countryCode", newCountryCode);
      }
    });
    const inputForm = ref();
    watch(inputForm, () => __async(this, null, function* () {
      useCallbacks().onEvent.value(OnEventType.onLoaded);
      triggerConditionalUI();
    }));
    const identifierMode = computed(() => {
      var _a;
      return (_a = props.appInfo.allowed_identifier) != null ? _a : oe.email;
    });
    function onSubmit(event) {
      return __async(this, null, function* () {
        const {
          identifier,
          identifierExists,
          userHasWebauthn,
          userHasPasskey,
          userStatus,
          userID,
          identifierType,
          emailVerified,
          phoneVerified
        } = event;
        const beforeAuthResult = useCallbacks().beforeAuth.value(identifier);
        if (!beforeAuthResult) {
          return;
        }
        const errorString = checkIdentifierExistsAndStatus(identifierExists, identifierType, userStatus);
        if (errorString !== "") {
          error.value = errorString;
          return;
        }
        useAuthEvent().emitEvent({
          type: AuthEventType.LoginUser,
          payload: {
            identifier,
            identifierType,
            userHasPasskey,
            userHasWebauthn,
            userID,
            emailVerified,
            phoneVerified
          }
        });
      });
    }
    function checkIdentifierExistsAndStatus(identifierExists, identifierType, userStatus) {
      if (!identifierExists) {
        let identiferString = identifierType === IdentifierType.email ? t("email") : t("phone");
        identiferString = `${identiferString.charAt(0).toUpperCase()}${identiferString.slice(1)}`;
        let message = `${t("not-recognized", [identiferString])}.`;
        if (props.canToggleLoginRegister && props.appInfo.public_signup) {
          message = `${message} ${t("toggle-register")}`;
        }
        return message;
      }
      if (identifierExists && userStatus === te.INACTIVE) {
        return t("account-no-longer-active");
      }
      return "";
    }
    const showWelcomeBack = ref(false);
    let abortController;
    onMounted(() => {
      const lastLogin = getLastLogin();
      if (lastLogin && !props.changeEmail) {
        identifierText.value = lastLogin;
        showWelcomeBack.value = true;
      }
    });
    function triggerConditionalUI() {
      return __async(this, null, function* () {
        if (props.conditionalUI) {
          abortController = new AbortController();
          const passage = new Y(appId.value);
          passage.loginConditional(abortController.signal).then((authResult) => {
            useAuthEvent().emitEvent({
              type: AuthEventType.AuthSuccess,
              payload: {
                authResult
              }
            });
          }).catch(() => {
          });
        }
      });
    }
    function cancelConditionalUI() {
      abortController == null ? void 0 : abortController.abort();
    }
    onBeforeUnmount(() => {
      cancelConditionalUI();
    });
    watch(
      () => props.visible,
      () => {
        if (showWelcomeBack.value === true) {
          identifierText.value = "";
        }
        showWelcomeBack.value = false;
        if (props.visible) {
          triggerConditionalUI();
        } else {
          cancelConditionalUI();
        }
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$u, {
        appId: unref(appId),
        identifierMode: identifierMode.value,
        conditionalUI: _ctx.conditionalUI,
        showWelcomeBack: showWelcomeBack.value,
        "onUpdate:showWelcomeBack": _cache[0] || (_cache[0] = ($event) => showWelcomeBack.value = $event),
        identifier: identifierText.value,
        "onUpdate:identifier": _cache[1] || (_cache[1] = ($event) => identifierText.value = $event),
        validationError: error.value,
        "onUpdate:validationError": _cache[2] || (_cache[2] = ($event) => error.value = $event),
        countryCode: countryCodeText.value,
        "onUpdate:countryCode": _cache[3] || (_cache[3] = ($event) => countryCodeText.value = $event),
        onOnSubmit: _cache[4] || (_cache[4] = ($event) => onSubmit($event)),
        ref_key: "inputForm",
        ref: inputForm
      }, {
        loginInput: withCtx(() => [
          renderSlot(_ctx.$slots, "loginInput")
        ]),
        _: 3
      }, 8, ["appId", "identifierMode", "conditionalUI", "showWelcomeBack", "identifier", "validationError", "countryCode"]);
    };
  }
});
const _hoisted_1$p = {
  key: 0,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
const _sfc_main$s = defineComponent({
  __name: "Register",
  props: {
    canToggleLoginRegister: { type: Boolean },
    identifier: {},
    countryCode: {},
    appInfo: {}
  },
  emits: ["update:identifier", "update:countryCode", "authEvent"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const { appId } = useAppId();
    const { emitEvent: emitEvent2 } = useAuthEvent();
    const error = ref("");
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        emit("update:identifier", newIdentifier);
      }
    });
    const countryCodeText = computed({
      get() {
        return props.countryCode;
      },
      set(newCountryCode) {
        emit("update:countryCode", newCountryCode);
      }
    });
    const publicSignup = computed(() => {
      return props.appInfo.public_signup;
    });
    const identifierMode = computed(() => {
      return props.appInfo.allowed_identifier;
    });
    function onSubmit(event) {
      return __async(this, null, function* () {
        const { identifier, identifierExists, userStatus, identifierType } = event;
        const beforeAuthResult = useCallbacks().beforeAuth.value(identifier);
        if (!beforeAuthResult) {
          return;
        }
        let validMetadata = true;
        if (metadataComponent.value) {
          validMetadata = metadataComponent.value.validate();
        }
        if (identifierExists) {
          if (userStatus === te.ACTIVE) {
            let message = t("account-already-exists", [
              identifierType === IdentifierType.email ? t("email") : t("phone-number")
            ]);
            if (props.canToggleLoginRegister) {
              message = message + " " + t("toggle-login");
            }
            error.value = message;
            return;
          } else if (userStatus === te.INACTIVE) {
            error.value = t("account-no-longer-active");
            return;
          }
        }
        const passage = new Y(appId.value);
        if (!validMetadata) {
          return;
        }
        try {
          yield passage.createUser({
            identifier,
            user_metadata: transformMetadata(metadata.value, props.appInfo.user_metadata_schema, true)
          });
        } catch (err) {
          if (err instanceof h && err.message.startsWith("Public signup")) {
            error.value = err.message;
          } else {
            error.value = t("unexpected-error");
          }
          return;
        }
        emitEvent2({
          type: AuthEventType.CreatedUser,
          payload: {
            identifier,
            identifierType
          }
        });
      });
    }
    const metadata = ref({});
    const metadataComponent = ref();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createVNode(_sfc_main$u, {
          appId: unref(appId),
          identifierMode: identifierMode.value,
          identifier: identifierText.value,
          "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifierText.value = $event),
          validationError: error.value,
          "onUpdate:validationError": _cache[1] || (_cache[1] = ($event) => error.value = $event),
          countryCode: countryCodeText.value,
          "onUpdate:countryCode": _cache[2] || (_cache[2] = ($event) => countryCodeText.value = $event),
          onOnSubmit: _cache[3] || (_cache[3] = ($event) => onSubmit($event))
        }, {
          metadataFields: withCtx(() => [
            _ctx.appInfo && _ctx.appInfo.layouts.registration.length > 0 ? (openBlock(), createBlock(UserMetadata, {
              key: 0,
              isEditing: true,
              appInfo: _ctx.appInfo,
              layoutType: unref(LayoutType).Registration,
              userMetadata: metadata.value,
              ref_key: "metadataComponent",
              ref: metadataComponent
            }, null, 8, ["appInfo", "layoutType", "userMetadata"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["appId", "identifierMode", "identifier", "validationError", "countryCode"]),
        !publicSignup.value ? (openBlock(), createElementBlock("div", _hoisted_1$p, toDisplayString(unref(t)("public-registration-not-allowed")), 1)) : createCommentVNode("", true)
      ]);
    };
  }
});
const ephemeralAppIdKey = "psg_ephemeral_app_id";
const ephemeralAppNameKey = "psg_ephemeral_app_name";
class EphemeralAppService {
  newEphemeralApp() {
    return __async(this, null, function* () {
      const ephemeralAppUrl = "https://api.passage.id/v1/apps/";
      const response = yield fetch(ephemeralAppUrl, {
        method: "POST",
        body: JSON.stringify({
          auth_origin: window.location.origin,
          name: "Ephemeral Random " + (Math.random() * 1e6).toString()
        })
      });
      const responseBody = yield response.json();
      if (response.status !== 200) {
        throw responseBody.message;
      }
      localStorage.setItem(ephemeralAppIdKey, responseBody.app.id);
      localStorage.setItem(ephemeralAppNameKey, responseBody.app.name);
      return responseBody;
    });
  }
}
const _sfc_main$r = defineComponent({
  name: "EphemeralAppInfo",
  setup() {
    const consoleUrl = "https://console.passage.id";
    const { t } = useLocale();
    const error = ref(false);
    const isEphemeral = ref(false);
    const claimed = ref(false);
    const ephemeralClaimUrl = ref("");
    const exampleTag = ref("");
    const passageWebSetup = () => __async(this, null, function* () {
      const { appIdUnassigned, updateAppId } = useAppId();
      if (appIdUnassigned.value) {
        isEphemeral.value = true;
        const ephemeralAppId = localStorage.getItem(ephemeralAppIdKey);
        const ephemeralAppName = localStorage.getItem(ephemeralAppNameKey);
        if (ephemeralAppId) {
          const nameParam = ephemeralAppName ? `?name=${encodeURIComponent(ephemeralAppName)}` : "";
          ephemeralClaimUrl.value = `${consoleUrl}/claim/${ephemeralAppId}${nameParam}`;
          updateAppId(ephemeralAppId);
          logToConsole();
        } else {
          try {
            const ephemeralService = new EphemeralAppService();
            const res = yield ephemeralService.newEphemeralApp();
            updateAppId(res.app.id);
            const nameParam = res.app.name ? `?name=${encodeURIComponent(res.app.name)}` : "";
            ephemeralClaimUrl.value = `${consoleUrl}/claim/${res.app.id}${nameParam}`;
            logToConsole();
          } catch (err) {
            error.value = true;
            updateAppId("");
          }
        }
      }
    });
    const checkIfClaimed = () => __async(this, null, function* () {
      const { appId } = useAppId();
      if (!isEphemeral.value) {
        return;
      }
      const passage = new Y(appId.value);
      try {
        const res = yield passage.appInfo();
        if (!res.ephemeral) {
          claimed.value = true;
          exampleTag.value = `<passage-auth app-id="${appId.value}"/>`;
        }
      } catch (e) {
        error.value = true;
      }
    });
    function logToConsole() {
      const { appId } = useAppId();
      console.info(`Passage Test App ID: ${appId.value}`);
      console.info(`Claim your app: ${ephemeralClaimUrl.value}`);
    }
    onBeforeMount(() => __async(this, null, function* () {
      yield passageWebSetup();
      yield checkIfClaimed();
    }));
    return {
      error,
      isEphemeral,
      claimed,
      ephemeralClaimUrl,
      exampleTag,
      t
    };
  }
});
const _hoisted_1$o = { key: 0 };
const _hoisted_2$g = {
  key: 0,
  class: "notification is-danger"
};
const _hoisted_3$e = {
  key: 1,
  class: "notification ephemeral-box",
  "data-test": "ephemeral-app-message"
};
const _hoisted_4$d = { key: 0 };
const _hoisted_5$c = ["href"];
const _hoisted_6$a = { key: 1 };
const _hoisted_7$a = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.isEphemeral ? (openBlock(), createElementBlock("div", _hoisted_1$o, [
    _ctx.error ? (openBlock(), createElementBlock("div", _hoisted_2$g, toDisplayString(_ctx.t("unable-to-create-test-app")), 1)) : (openBlock(), createElementBlock("div", _hoisted_3$e, [
      !_ctx.claimed ? (openBlock(), createElementBlock("div", _hoisted_4$d, [
        createTextVNode(toDisplayString(_ctx.t("currently-using-test-app")) + " ", 1),
        createBaseVNode("a", {
          href: _ctx.ephemeralClaimUrl,
          target: "_blank"
        }, toDisplayString(_ctx.t("click-here")), 9, _hoisted_5$c),
        createTextVNode(".")
      ])) : (openBlock(), createElementBlock("div", _hoisted_6$a, [
        createTextVNode(toDisplayString(_ctx.t("add-your-claimed-app-like-this")) + " ", 1),
        _hoisted_7$a,
        createTextVNode(toDisplayString(_ctx.exampleTag), 1)
      ]))
    ]))
  ])) : createCommentVNode("", true);
}
var EphemeralAppInfo = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$1]]);
const _hoisted_1$n = {
  key: 0,
  class: "link has-text-centered"
};
const _hoisted_2$f = { class: "passage-branding" };
const _hoisted_3$d = {
  href: "https://passage.1password.com/",
  target: "_new_tab"
};
const _sfc_main$q = defineComponent({
  __name: "PassageBranding",
  props: {
    appInfo: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return _ctx.appInfo.passage_branding ? (openBlock(), createElementBlock("div", _hoisted_1$n, [
        createBaseVNode("div", _hoisted_2$f, [
          createBaseVNode("a", _hoisted_3$d, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).poweredByPassage,
              alt: "Powered by Passage Icon"
            }, null, 8, ["src"])
          ])
        ])
      ])) : createCommentVNode("", true);
    };
  }
});
const _hoisted_1$m = { class: "view-email-input" };
const _hoisted_2$e = { class: "auth-flex-container" };
const _hoisted_3$c = { class: "title main-title has-text-centered" };
const _hoisted_4$c = /* @__PURE__ */ createBaseVNode("div", { style: { "height": "20px" } }, null, -1);
const _hoisted_5$b = { class: "spacer" };
const _hoisted_6$9 = { class: "link has-text-centered" };
const _hoisted_7$9 = { key: 0 };
const _hoisted_8$7 = ["onClick"];
const _hoisted_9$6 = { key: 1 };
const _hoisted_10$4 = ["onClick"];
const _sfc_main$p = defineComponent({
  __name: "AuthView",
  props: {
    register: { type: Boolean },
    appInfo: {},
    conditionalUI: { type: Boolean },
    changeEmail: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const showLogin = ref(!props.register);
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    const publicSignup = computed(() => {
      return props.appInfo.public_signup;
    });
    function changeInputPage() {
      showLogin.value = !showLogin.value;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$m, [
        createBaseVNode("div", _hoisted_2$e, [
          createBaseVNode("div", _hoisted_3$c, toDisplayString(showLogin.value ? unref(t)("login-title") : unref(t)("register-title")), 1),
          _hoisted_4$c,
          withDirectives(createVNode(_sfc_main$t, {
            identifier: identifier.value,
            "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
            canToggleLoginRegister: true,
            countryCode: unref(countryCode),
            "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
            appInfo: _ctx.appInfo,
            visible: showLogin.value,
            conditionalUI: _ctx.conditionalUI,
            changeEmail: _ctx.changeEmail
          }, {
            loginInput: withCtx(() => [
              renderSlot(_ctx.$slots, "loginInput")
            ]),
            _: 3
          }, 8, ["identifier", "countryCode", "appInfo", "visible", "conditionalUI", "changeEmail"]), [
            [vShow, showLogin.value]
          ]),
          withDirectives(createVNode(_sfc_main$s, {
            identifier: identifier.value,
            "onUpdate:identifier": _cache[2] || (_cache[2] = ($event) => identifier.value = $event),
            canToggleLoginRegister: true,
            countryCode: unref(countryCode),
            "onUpdate:countryCode": _cache[3] || (_cache[3] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
            appInfo: _ctx.appInfo
          }, null, 8, ["identifier", "countryCode", "appInfo"]), [
            [vShow, !showLogin.value]
          ]),
          createBaseVNode("div", _hoisted_5$b, [
            createVNode(EphemeralAppInfo)
          ]),
          createBaseVNode("div", _hoisted_6$9, [
            showLogin.value && publicSignup.value ? (openBlock(), createElementBlock("div", _hoisted_7$9, [
              createTextVNode(toDisplayString(unref(t)("dont-have-an-account")) + " ", 1),
              createBaseVNode("a", {
                onClick: withModifiers(changeInputPage, ["prevent"]),
                role: "button",
                "data-test": "register-link"
              }, toDisplayString(unref(t)("register-here")), 9, _hoisted_8$7)
            ])) : !showLogin.value ? (openBlock(), createElementBlock("div", _hoisted_9$6, [
              createTextVNode(toDisplayString(unref(t)("already-have-an-account")) + " ", 1),
              createBaseVNode("a", {
                onClick: withModifiers(changeInputPage, ["prevent"]),
                role: "button",
                "data-test": "login-link"
              }, toDisplayString(unref(t)("login-here")), 9, _hoisted_10$4)
            ])) : createCommentVNode("", true)
          ])
        ]),
        createVNode(_sfc_main$q, { "app-info": _ctx.appInfo }, null, 8, ["app-info"])
      ]);
    };
  }
});
function useUIState() {
  const showFailure = ref(false);
  const showSuccess = ref(false);
  const loading = ref(false);
  const pageLoading = ref(true);
  const { t } = useLocale();
  const title = computed(() => {
    if (showSuccess.value) {
      return t("success");
    }
    if (showFailure.value) {
      return t("something-went-wrong");
    }
    return t("log-in-with-a-passkey");
  });
  const uiSuccess = () => {
    showSuccess.value = true;
    showFailure.value = false;
    loading.value = false;
  };
  const uiError = () => {
    showSuccess.value = false;
    showFailure.value = true;
    loading.value = false;
  };
  const uiLoading = () => {
    showSuccess.value = false;
    showFailure.value = false;
    loading.value = true;
  };
  return {
    showFailure,
    showSuccess,
    loading,
    pageLoading,
    title,
    uiSuccess,
    uiError,
    uiLoading
  };
}
var MagicLinkActionEnum = /* @__PURE__ */ ((MagicLinkActionEnum2) => {
  MagicLinkActionEnum2["LOGIN"] = "psg_magic_link";
  MagicLinkActionEnum2["VERIFY"] = "psg_verify_link";
  return MagicLinkActionEnum2;
})(MagicLinkActionEnum || {});
const useMagicLinkUtils = (magicLink) => {
  const magicLinkAction = ref();
  const invalidMagicLink = ref(false);
  const isMagicLinkValid = () => {
    const searchParams = new URLSearchParams(window.location.href.split("?")[1]);
    if (searchParams.has("psg_magic_link")) {
      magicLinkAction.value = "psg_magic_link";
    } else if (searchParams.has("psg_verify_link")) {
      magicLinkAction.value = "psg_verify_link";
    }
    if (!magicLinkAction.value || !magicLink) {
      invalidMagicLink.value = true;
    }
    return !invalidMagicLink.value;
  };
  return {
    magicLinkAction,
    invalidMagicLink,
    isMagicLinkValid
  };
};
const useMagicLinkActivation = ({ magicLink, uiState, magicLinkUtils, passage }) => {
  const authResult2 = ref(null);
  const onBeforeActivate = () => {
    uiState.uiLoading();
    authResult2.value = { auth_token: "", redirect_url: "" };
  };
  const onActivateError = () => {
    uiState.uiError();
  };
  const onActivateErrorInvalidMagicLink = () => {
    magicLinkUtils.invalidMagicLink.value = true;
    uiState.uiError();
  };
  const onActivateSuccess = (_0) => __async(void 0, [_0], function* ({
    webauthnAllowed,
    magicLinkAction,
    result
  }) {
    authResult2.value = result;
    if (!webauthnAllowed || magicLinkAction === MagicLinkActionEnum.VERIFY) {
      uiState.uiSuccess();
      yield new Promise((resolve) => {
        setTimeout(resolve, 2e3);
      });
    }
    if (authResult2.value.redirect_url) {
      useAuthEvent().emitEvent({
        type: magicLinkAction === MagicLinkActionEnum.VERIFY ? AuthEventType.AuthSuccess : AuthEventType.FallbackAuthSuccess,
        payload: {
          authResult: result
        }
      });
    }
  });
  const activateWithoutBiometrics = (webauthnAllowed, magicLinkAction) => __async(void 0, null, function* () {
    onBeforeActivate();
    try {
      const result = yield passage.magicLinkActivate(magicLink);
      onActivateSuccess({ webauthnAllowed, magicLinkAction, result });
    } catch (err) {
      if (err.statusCode === T.NotFound) {
        onActivateErrorInvalidMagicLink();
      } else {
        onActivateError();
      }
    }
  });
  return {
    authResult: authResult2,
    onBeforeActivate,
    onActivateError,
    onActivateErrorInvalidMagicLink,
    onActivateSuccess,
    activateWithoutBiometrics
  };
};
const _hoisted_1$l = { class: "auth-flex-container" };
const _hoisted_2$d = { class: "image has-text-centered" };
const _hoisted_3$b = {
  class: "content has-text-centered",
  "data-test": "activate-magic-link-message"
};
const _hoisted_4$b = { key: 0 };
const _hoisted_5$a = { key: 1 };
const _hoisted_6$8 = { key: 2 };
const _hoisted_7$8 = { key: 3 };
const _hoisted_8$6 = { key: 4 };
const _hoisted_9$5 = {
  key: 0,
  class: "flex-row flex-center",
  style: { "padding": "20px 0px" }
};
const _hoisted_10$3 = ["onClick", "disabled"];
const _hoisted_11$3 = { key: 0 };
const _hoisted_12$3 = { key: 1 };
const _hoisted_13$3 = { key: 2 };
const _sfc_main$o = defineComponent({
  __name: "ActivateMagicLink",
  props: {
    magicLink: {},
    webauthnAllowed: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const { appId } = useAppId();
    const passage = new Y(appId.value);
    const uiState = useUIState();
    const { showFailure, showSuccess, loading, pageLoading, title } = uiState;
    const magicLinkUtils = useMagicLinkUtils(props.magicLink);
    const { isMagicLinkValid, invalidMagicLink, magicLinkAction } = magicLinkUtils;
    const activation = useMagicLinkActivation({
      uiState,
      magicLinkUtils,
      passage,
      magicLink: props.magicLink
    });
    function onButtonClick() {
      if (invalidMagicLink.value) {
        window.location.href = window.location.href.split("?")[0];
      } else {
        activation.activateWithoutBiometrics(props.webauthnAllowed, magicLinkAction.value);
      }
    }
    onMounted(() => __async(this, null, function* () {
      if (isMagicLinkValid()) {
        yield activation.activateWithoutBiometrics(props.webauthnAllowed, magicLinkAction.value);
        useCallbacks().onEvent.value(OnEventType.onMagicLinkActivateSuccess);
      } else {
        uiState.uiError();
      }
      pageLoading.value = false;
    }));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: "fade",
        mode: "out-in",
        appear: ""
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", _hoisted_1$l, [
            createBaseVNode("div", {
              class: normalizeClass(["title has-text-centered", [unref(showSuccess) ? "main-title" : "secondary-title"]])
            }, toDisplayString(unref(showFailure) ? unref(invalidMagicLink) ? unref(t)("invalid-link") : unref(t)("device-login-failed-title") : unref(title)), 3),
            createBaseVNode("figure", _hoisted_2$d, [
              unref(showSuccess) ? (openBlock(), createBlock(unref(InlineSvg), {
                key: 0,
                src: unref(Icons).success,
                alt: "Magic link success"
              }, null, 8, ["src"])) : unref(showFailure) ? (openBlock(), createBlock(unref(InlineSvg), {
                key: 1,
                src: unref(Icons).failure,
                alt: "Magic link failure"
              }, null, 8, ["src"])) : createCommentVNode("", true)
            ]),
            createBaseVNode("div", _hoisted_3$b, [
              unref(showSuccess) && unref(magicLinkAction) === unref(MagicLinkActionEnum).LOGIN ? (openBlock(), createElementBlock("div", _hoisted_4$b, toDisplayString(unref(t)("successfully-logged-in-redirect")), 1)) : unref(showSuccess) && unref(magicLinkAction) === unref(MagicLinkActionEnum).VERIFY ? (openBlock(), createElementBlock("div", _hoisted_5$a, toDisplayString(unref(t)("successfully-changed-email")), 1)) : unref(showFailure) && unref(invalidMagicLink) && unref(magicLinkAction) === unref(MagicLinkActionEnum).VERIFY ? (openBlock(), createElementBlock("div", _hoisted_6$8, toDisplayString(unref(t)("link-invalid")), 1)) : unref(showFailure) && unref(invalidMagicLink) ? (openBlock(), createElementBlock("div", _hoisted_7$8, toDisplayString(unref(t)("login-link-invalid")), 1)) : unref(showFailure) && unref(magicLinkAction) === unref(MagicLinkActionEnum).VERIFY ? (openBlock(), createElementBlock("div", _hoisted_8$6, toDisplayString(unref(t)("verification-failed-please-try-again")), 1)) : createCommentVNode("", true)
            ]),
            unref(showFailure) || unref(showSuccess) ? (openBlock(), createElementBlock("div", _hoisted_9$5, [
              createBaseVNode("button", {
                onClick: withModifiers(onButtonClick, ["prevent"]),
                type: "button",
                class: normalizeClass(["button is-primary", { "is-loading": unref(loading) }]),
                part: "button",
                disabled: unref(loading),
                "data-test": "activate-magic-link-button"
              }, [
                unref(showFailure) && unref(invalidMagicLink) ? (openBlock(), createElementBlock("span", _hoisted_11$3, toDisplayString(unref(t)("request-new-link")), 1)) : unref(showFailure) ? (openBlock(), createElementBlock("span", _hoisted_12$3, toDisplayString(unref(t)("try-again")), 1)) : unref(showSuccess) ? (openBlock(), createElementBlock("span", _hoisted_13$3, toDisplayString(unref(t)("redirect-now")), 1)) : createCommentVNode("", true)
              ], 10, _hoisted_10$3)
            ])) : createCommentVNode("", true)
          ], 512), [
            [vShow, !unref(pageLoading)]
          ])
        ]),
        _: 1
      });
    };
  }
});
const _hoisted_1$k = { class: "view-verify-token" };
const _sfc_main$n = defineComponent({
  __name: "ActivateMagicLinkView",
  props: {
    magicLink: {},
    webauthnAllowed: { type: Boolean }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$k, [
        createVNode(_sfc_main$o, {
          magicLink: _ctx.magicLink,
          webauthnAllowed: _ctx.webauthnAllowed
        }, null, 8, ["magicLink", "webauthnAllowed"])
      ]);
    };
  }
});
const _hoisted_1$j = { class: "view-email-input" };
const _sfc_main$m = defineComponent({
  __name: "LoginView",
  props: {
    register: { type: Boolean },
    appInfo: {},
    conditionalUI: { type: Boolean },
    changeEmail: { type: Boolean }
  },
  setup(__props) {
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$j, [
        createVNode(_sfc_main$t, {
          identifier: identifier.value,
          "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
          countryCode: unref(countryCode),
          "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
          canToggleLoginRegister: false,
          appInfo: _ctx.appInfo,
          conditionalUI: _ctx.conditionalUI,
          changeEmail: _ctx.changeEmail
        }, {
          loginInput: withCtx(() => [
            renderSlot(_ctx.$slots, "loginInput")
          ]),
          _: 3
        }, 8, ["identifier", "countryCode", "appInfo", "conditionalUI", "changeEmail"]),
        createVNode(_sfc_main$q, { "app-info": _ctx.appInfo }, null, 8, ["app-info"])
      ]);
    };
  }
});
const _hoisted_1$i = { class: "view-email-input" };
const _sfc_main$l = defineComponent({
  __name: "RegisterView",
  props: {
    register: { type: Boolean },
    appInfo: {}
  },
  setup(__props) {
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$i, [
        createVNode(_sfc_main$s, {
          identifier: identifier.value,
          "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
          countryCode: unref(countryCode),
          "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
          canToggleLoginRegister: false,
          appInfo: _ctx.appInfo
        }, null, 8, ["identifier", "countryCode", "appInfo"]),
        createVNode(_sfc_main$q, { "app-info": _ctx.appInfo }, null, 8, ["app-info"])
      ]);
    };
  }
});
const _sfc_main$k = defineComponent({
  name: "Spinner"
});
const _hoisted_1$h = { class: "spinner-box" };
const _hoisted_2$c = { class: "spinner-content" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$h, [
    createBaseVNode("div", _hoisted_2$c, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var Spinner = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render]]);
const _hoisted_1$g = { class: "auth-flex-container" };
const _hoisted_2$b = { class: "title has-text-centered" };
const _hoisted_3$a = {
  key: 0,
  class: "content has-text-centered",
  style: { "margin-bottom": "15px !important" }
};
const _hoisted_4$a = ["innerHTML"];
const _hoisted_5$9 = { class: "flex-row flex-center" };
const _hoisted_6$7 = ["onClick", "disabled"];
const _hoisted_7$7 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_8$5 = { class: "link has-text-centered" };
const _hoisted_9$4 = ["onClick"];
const _sfc_main$j = defineComponent({
  __name: "MagicLink",
  props: {
    identifier: {},
    userIsRegistering: { type: Boolean },
    identifierVerifying: { type: Boolean },
    setupNewDevice: { type: Boolean },
    identifierType: {}
  },
  setup(__props) {
    const props = __props;
    const { t, locale } = useLocale();
    const { appId } = useAppId();
    const passage = new Y(appId.value);
    const { emitEvent: emitEvent2 } = useAuthEvent();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const title = computed(() => {
      if (props.identifierVerifying) {
        if (isEmail.value) {
          if (props.userIsRegistering) {
            return t("verify-email-to-register");
          } else {
            return t("verify-email-to-login");
          }
        } else {
          if (props.userIsRegistering) {
            return t("verify-phone-to-register");
          } else {
            return t("verify-phone-to-login");
          }
        }
      } else {
        if (isEmail.value) {
          if (props.userIsRegistering) {
            return t("check-email-to-register");
          } else {
            return t("check-email-to-login");
          }
        } else {
          if (props.userIsRegistering) {
            return t("check-phone-to-register");
          } else {
            return t("check-phone-to-login");
          }
        }
      }
    });
    const message = computed(() => {
      let messageValue = "";
      const messageType = props.identifierType === IdentifierType.email ? t("messagetype-email") : t("messagetype-sms");
      const messageMedium = props.identifierType === IdentifierType.email ? t("email") : t("phone-number");
      const registrationType = props.userIsRegistering ? t("registration") : t("login");
      const loginMessage = props.identifierVerifying ? t("please-verify-identifier", [messageMedium, registrationType]) : t("you-will-be-automatically-signed-in");
      messageValue = t("weve-sent-messagetype", [messageType, props.identifier, loginMessage]);
      if (props.setupNewDevice && !props.userIsRegistering) {
        messageValue = t("we-dont-recognize-this-device") + " " + messageValue;
      }
      return messageValue;
    });
    onMounted(() => {
      if (props.userIsRegistering) {
        magicLinkSendRegister();
      } else {
        magicLinkSendLogin();
      }
    });
    function changeEmail() {
      localStorage.removeItem("email");
      localStorage.removeItem("magic_link_id");
      localStorage.removeItem("wait_count");
      waitForActivatedMagicLink(721);
      emitEvent2({ type: AuthEventType.ChangeIdentifier, payload: void 0 });
    }
    function resendMagicLink() {
      return __async(this, null, function* () {
        yield magicLinkSendLogin();
      });
    }
    const showWaiting = ref(false);
    const loading = ref(true);
    function magicLinkSendRegister() {
      return __async(this, null, function* () {
        showWaiting.value = false;
        loading.value = true;
        yield new Promise((resolve) => {
          setTimeout(resolve, 2e3);
        });
        try {
          const res = yield passage.newRegisterMagicLink(props.identifier, locale.value.split("-")[0]);
          if (res.id != "") {
            localStorage.setItem("magic_link_id", res.id);
            waitForActivatedMagicLink(0);
          }
        } catch (err) {
          console.log("magicLinkSend error", err);
        } finally {
          loading.value = false;
        }
      });
    }
    function magicLinkSendLogin() {
      return __async(this, null, function* () {
        showWaiting.value = false;
        loading.value = true;
        try {
          const res = yield passage.newLoginMagicLink(props.identifier, locale.value.split("-")[0]);
          if (res.id != "") {
            localStorage.setItem("magic_link_id", res.id);
            waitForActivatedMagicLink(0);
          }
        } catch (err) {
          console.log("magicLinkSend error", err);
        } finally {
          yield new Promise((resolve) => {
            setTimeout(resolve, 3e3);
          });
          loading.value = false;
        }
      });
    }
    let authResult = void 0;
    function lookupMagicLink() {
      return __async(this, null, function* () {
        const id = localStorage.getItem("magic_link_id");
        yield lookupMagicLinkActivated(id).then(() => __async(this, null, function* () {
          if (authResult && authResult.redirect_url != "") {
            localStorage.removeItem("magic_link_id");
            localStorage.removeItem("wait_count");
            useCallbacks().onEvent.value(OnEventType.onMagicLinkActivated);
            emitEvent2({
              type: AuthEventType.FallbackAuthSuccess,
              payload: {
                identifier: props.identifier,
                authResult
              }
            });
          }
        }));
      });
    }
    function lookupMagicLinkActivated(id) {
      return __async(this, null, function* () {
        yield passage.getMagicLinkStatus(id).then((res) => {
          waitForActivatedMagicLink(721);
          authResult = res;
        }).catch(() => {
        });
        return;
      });
    }
    let timer;
    function waitForActivatedMagicLink(count) {
      let i = count;
      if (i < 720) {
        showWaiting.value = true;
        timer = setTimeout(() => __async(this, null, function* () {
          delay(i);
          i++;
          waitForActivatedMagicLink(i);
        }), 5e3);
      } else {
        clearTimeout(timer);
        showWaiting.value = false;
        return;
      }
    }
    function delay(i) {
      lookupMagicLink();
      localStorage.setItem("wait_count", i.toString());
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$g, [
        createBaseVNode("div", _hoisted_2$b, [
          createBaseVNode("span", null, toDisplayString(title.value), 1)
        ]),
        createVNode(Spinner, null, {
          default: withCtx(() => [
            isEmail.value ? (openBlock(), createBlock(unref(InlineSvg), {
              key: 0,
              src: unref(Icons).email,
              alt: "Email envelope"
            }, null, 8, ["src"])) : (openBlock(), createBlock(unref(InlineSvg), {
              key: 1,
              src: unref(Icons).phone,
              alt: "Message bubbles"
            }, null, 8, ["src"]))
          ]),
          _: 1
        }),
        message.value ? (openBlock(), createElementBlock("div", _hoisted_3$a, [
          createBaseVNode("span", { innerHTML: message.value }, null, 8, _hoisted_4$a)
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_5$9, [
          createBaseVNode("button", {
            onClick: withModifiers(resendMagicLink, ["prevent"]),
            type: "button",
            class: "button is-primary",
            part: "button",
            disabled: loading.value
          }, toDisplayString(unref(t)("resend-isemail-email-message", [isEmail.value ? unref(t)("email") : unref(t)("message")])), 9, _hoisted_6$7)
        ]),
        _hoisted_7$7,
        createBaseVNode("div", _hoisted_8$5, [
          createBaseVNode("a", {
            onClick: withModifiers(changeEmail, ["prevent"]),
            role: "button",
            "data-test": "change-email-button"
          }, toDisplayString(unref(t)("change-isemail-email-phone", [isEmail.value ? unref(t)("email") : unref(t)("phone")])), 9, _hoisted_9$4)
        ])
      ]);
    };
  }
});
const _hoisted_1$f = { class: "view-access-token" };
const _sfc_main$i = defineComponent({
  __name: "MagicLinkView",
  props: {
    identifier: {},
    userIsRegistering: { type: Boolean },
    identifierVerifying: { type: Boolean },
    setupNewDevice: { type: Boolean },
    identifierType: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$f, [
        createVNode(_sfc_main$j, {
          identifier: _ctx.identifier,
          userIsRegistering: _ctx.userIsRegistering,
          identifierVerifying: _ctx.identifierVerifying,
          setupNewDevice: _ctx.setupNewDevice,
          identifierType: _ctx.identifierType
        }, null, 8, ["identifier", "userIsRegistering", "identifierVerifying", "setupNewDevice", "identifierType"])
      ]);
    };
  }
});
const _hoisted_1$e = { class: "passage-learnmore-modal" };
const _hoisted_2$a = { class: "passage-learnmore-top" };
const _hoisted_3$9 = { class: "passage-learnmore-close-button" };
const _hoisted_4$9 = { class: "passage-learnmore-content" };
const _hoisted_5$8 = { style: { "margin-bottom": "32px" } };
const _sfc_main$h = defineComponent({
  __name: "LearnMoreLayout",
  setup(__props) {
    const { t } = useLocale();
    const showModal = ref(false);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        showModal.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "passage-learnmore",
          onClick: _cache[1] || (_cache[1] = ($event) => showModal.value = false)
        }, [
          createBaseVNode("div", _hoisted_1$e, [
            createBaseVNode("div", _hoisted_2$a, [
              createBaseVNode("div", {
                style: { "cursor": "pointer" },
                onClick: _cache[0] || (_cache[0] = ($event) => showModal.value = false)
              }, [
                createBaseVNode("span", _hoisted_3$9, toDisplayString(unref(t)("close")), 1),
                createVNode(unref(InlineSvg), {
                  src: unref(Icons).close
                }, null, 8, ["src"])
              ])
            ]),
            createBaseVNode("div", _hoisted_4$9, [
              renderSlot(_ctx.$slots, "body")
            ])
          ])
        ])) : createCommentVNode("", true),
        createBaseVNode("div", null, [
          createBaseVNode("div", _hoisted_5$8, [
            createBaseVNode("span", null, [
              renderSlot(_ctx.$slots, "cta"),
              createTextVNode(" \xA0 ")
            ]),
            createBaseVNode("a", {
              style: { "text-decoration": "underline" },
              onClick: _cache[2] || (_cache[2] = ($event) => showModal.value = true),
              role: "button"
            }, toDisplayString(unref(t)("learn-more")), 1),
            createTextVNode(" \u2192 ")
          ])
        ])
      ], 64);
    };
  }
});
const _hoisted_1$d = { style: { "margin-bottom": "12px" } };
const _hoisted_2$9 = { class: "passage-learnmore-header" };
const _hoisted_3$8 = { class: "passage-learnmore-body" };
const _hoisted_4$8 = { class: "passage-learnmore-header" };
const _hoisted_5$7 = { class: "passage-learnmore-body" };
const _hoisted_6$6 = { class: "passage-learnmore-header" };
const _hoisted_7$6 = { class: "passage-learnmore-body" };
const _sfc_main$g = defineComponent({
  __name: "LearnMorePasskey",
  props: {
    cta: {}
  },
  setup(__props) {
    const { t } = useLocale();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$h, null, {
        cta: withCtx(() => [
          createBaseVNode("div", _hoisted_1$d, toDisplayString(unref(t)("passkeys-are-a-simple")), 1),
          createTextVNode(" " + toDisplayString(_ctx.cta), 1)
        ]),
        body: withCtx(() => [
          createBaseVNode("div", _hoisted_2$9, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).privateIcon,
              style: { "margin-right": "8px" }
            }, null, 8, ["src"]),
            createTextVNode(" " + toDisplayString(unref(t)("private")), 1)
          ]),
          createBaseVNode("div", _hoisted_3$8, toDisplayString(unref(t)("unlock-your-passkey")), 1),
          createBaseVNode("div", _hoisted_4$8, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).secure,
              style: { "margin-right": "8px" }
            }, null, 8, ["src"]),
            createTextVNode(" " + toDisplayString(unref(t)("secure")), 1)
          ]),
          createBaseVNode("div", _hoisted_5$7, toDisplayString(unref(t)("passkey-is-unique")), 1),
          createBaseVNode("div", _hoisted_6$6, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).simple,
              style: { "margin-right": "8px" }
            }, null, 8, ["src"]),
            createTextVNode(" " + toDisplayString(unref(t)("simple")), 1)
          ]),
          createBaseVNode("div", _hoisted_7$6, toDisplayString(unref(t)("easy-to-use")), 1)
        ]),
        _: 1
      });
    };
  }
});
const _hoisted_1$c = {
  class: "auth-flex-container",
  "data-tag": "register-device-message"
};
const _hoisted_2$8 = { class: "title secondary-title has-text-centered" };
const _hoisted_3$7 = { class: "image has-text-centered" };
const _hoisted_4$7 = { key: 0 };
const _hoisted_5$6 = {
  key: 2,
  class: "flex-row flex-center"
};
const _hoisted_6$5 = ["onClick", "disabled"];
const _hoisted_7$5 = ["onClick", "disabled"];
const _hoisted_8$4 = {
  key: 3,
  class: "flex-row flex-center"
};
const _hoisted_9$3 = ["onClick", "disabled"];
const _hoisted_10$2 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_11$2 = {
  key: 4,
  class: "content has-text-centered",
  style: { "margin-top": "20px !important" }
};
const _hoisted_12$2 = { class: "link" };
const _hoisted_13$2 = ["onClick"];
const _hoisted_14$2 = { class: "link" };
const _hoisted_15$2 = ["onClick"];
const _hoisted_16$2 = {
  key: 0,
  class: "link"
};
const _hoisted_17 = ["onClick"];
const _sfc_main$f = defineComponent({
  __name: "RegisterDevice",
  props: {
    identifier: {},
    identifierType: {},
    appInfo: {}
  },
  setup(__props) {
    const props = __props;
    const showFailure = ref(false);
    const loading = ref(false);
    const { t, te: te2 } = useLocale();
    const { appId } = useAppId();
    const passage = new Y(appId.value);
    const { emitEvent: emitEvent2 } = useAuthEvent();
    const { autofocusButton } = useAutofocusButton();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const fallbackAuth = computed(() => {
      var _a;
      return (_a = props.appInfo.auth_fallback_method) != null ? _a : ue.MagicLink;
    });
    const supportsFallback = computed(() => {
      return props.appInfo.auth_fallback_method !== ue.None;
    });
    const fallbackRegisterWithCodeEmailOrTextBtnCopy = computed(() => {
      if (fallbackAuth.value === ue.LoginCode) {
        return te2("register-with-code") ? t("register-with-code") : "Register with a code";
      } else {
        return t("register-with-link", [isEmail.value ? t("email") : t("sms-text")]);
      }
    });
    const fallbackSendCodeEmailOrTextBtnCopy = computed(() => {
      if (fallbackAuth.value === ue.LoginCode) {
        return te2("send-code") ? t("send-code") : "Send code";
      } else {
        return t("send-email-or-text-link", [isEmail.value ? t("email") : t("sms-text")]);
      }
    });
    const failureCreateText = computed(() => {
      switch (props.appInfo.auth_fallback_method) {
        case ue.LoginCode:
          return te2("passkey-create-fail-try-code") ? t("passkey-create-fail-try-code") : "Unable to create a passkey. Try again or register with a one-time code.";
        case ue.MagicLink:
          return t("passkey-create-fail-try-link");
        case ue.None:
          return t("passkey-create-fail-no-fallback");
      }
    });
    function signUpWebAuthn(identifier) {
      return __async(this, null, function* () {
        loading.value = true;
        showFailure.value = false;
        try {
          const authResult = yield passage.register(identifier);
          loading.value = false;
          emitEvent2({
            type: AuthEventType.AuthSuccess,
            payload: {
              authResult,
              identifier: props.identifier
            }
          });
        } catch (err) {
          showFailure.value = true;
          loading.value = false;
        }
      });
    }
    function registerWithFallback() {
      emitEvent2({
        type: AuthEventType.FallbackAuth,
        payload: {
          identifier: props.identifier,
          identifierType: props.identifierType,
          userIsRegistering: true,
          userInitiated: true
        }
      });
    }
    function changeEmail() {
      localStorage.removeItem("email");
      useAuthEvent().emitEvent({ type: AuthEventType.ChangeIdentifier, payload: void 0 });
    }
    function onButtonClick() {
      signUpWebAuthn(props.identifier);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$c, [
        createBaseVNode("div", _hoisted_2$8, toDisplayString(unref(t)("register-with-a-passkey")), 1),
        createBaseVNode("figure", _hoisted_3$7, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).passkey,
            alt: "Register with a passkey",
            style: { "margin": "5px" }
          }, null, 8, ["src"])
        ]),
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_4$7, [
          createBaseVNode("p", null, toDisplayString(failureCreateText.value), 1)
        ])) : (openBlock(), createBlock(_sfc_main$g, {
          key: 1,
          cta: unref(t)("register-your-account")
        }, null, 8, ["cta"])),
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_5$6, [
          createBaseVNode("button", {
            onClick: withModifiers(onButtonClick, ["prevent"]),
            type: "button",
            part: "button",
            class: "button is-primary",
            disabled: loading.value,
            style: { "margin-right": "5px" }
          }, toDisplayString(unref(t)("try-again")), 9, _hoisted_6$5),
          _ctx.appInfo.auth_fallback_method !== unref(ue).None ? (openBlock(), createElementBlock("button", {
            key: 0,
            onClick: withModifiers(registerWithFallback, ["prevent"]),
            type: "button",
            part: "button button-secondary",
            class: "button is-secondary",
            disabled: loading.value,
            style: { "margin-left": "5px" },
            "data-test": "login-with-email-button",
            ref_key: "autofocusButton",
            ref: autofocusButton
          }, toDisplayString(fallbackSendCodeEmailOrTextBtnCopy.value), 9, _hoisted_7$5)) : createCommentVNode("", true)
        ])) : (openBlock(), createElementBlock("div", _hoisted_8$4, [
          createBaseVNode("button", {
            onClick: withModifiers(onButtonClick, ["prevent"]),
            type: "button",
            class: normalizeClass(["button", [{ "is-loading": loading.value }]]),
            part: "button",
            disabled: loading.value,
            "data-test": "register-main-button",
            tabindex: "0",
            ref_key: "autofocusButton",
            ref: autofocusButton
          }, [
            createBaseVNode("span", null, toDisplayString(unref(t)("register-with-passkey")), 1)
          ], 10, _hoisted_9$3)
        ])),
        _hoisted_10$2,
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_11$2, [
          createBaseVNode("div", _hoisted_12$2, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("change-isemail-email-phone", [isEmail.value ? unref(t)("email") : unref(t)("phone")])), 9, _hoisted_13$2)
          ])
        ])) : createCommentVNode("", true),
        !showFailure.value ? (openBlock(), createElementBlock("div", {
          key: 5,
          class: normalizeClass(["flex-row flex-wrap", supportsFallback.value ? "flex-between" : "flex-center"])
        }, [
          createBaseVNode("div", _hoisted_14$2, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("back")), 9, _hoisted_15$2)
          ]),
          supportsFallback.value ? (openBlock(), createElementBlock("div", _hoisted_16$2, [
            createBaseVNode("a", {
              onClick: withModifiers(registerWithFallback, ["prevent"]),
              role: "button",
              "data-test": "register-email-button"
            }, toDisplayString(fallbackRegisterWithCodeEmailOrTextBtnCopy.value), 9, _hoisted_17)
          ])) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true)
      ]);
    };
  }
});
const _sfc_main$e = defineComponent({
  __name: "RegisterDeviceView",
  props: {
    identifier: {},
    identifierType: {},
    appInfo: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$f, {
        identifier: _ctx.identifier,
        identifierType: _ctx.identifierType,
        appInfo: _ctx.appInfo
      }, null, 8, ["identifier", "identifierType", "appInfo"]);
    };
  }
});
const _hoisted_1$b = { class: "auth-flex-container" };
const _hoisted_2$7 = { class: "title has-text-centered" };
const _hoisted_3$6 = {
  class: "image has-text-centered",
  style: { "margin": "5px auto" }
};
const _hoisted_4$6 = {
  key: 1,
  class: "wrap-text",
  style: { "margin-bottom": "5px !important" }
};
const _hoisted_5$5 = { "data-test": "failure-message" };
const _hoisted_6$4 = {
  key: 2,
  class: "flex-row flex-center"
};
const _hoisted_7$4 = ["onClick", "disabled"];
const _hoisted_8$3 = ["onClick", "disabled"];
const _hoisted_9$2 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_10$1 = {
  key: 3,
  class: "content has-text-centered",
  style: { "margin-top": "20px !important" }
};
const _hoisted_11$1 = { class: "link" };
const _hoisted_12$1 = ["onClick"];
const _hoisted_13$1 = { class: "link" };
const _hoisted_14$1 = ["onClick"];
const _hoisted_15$1 = {
  key: 0,
  class: "link"
};
const _hoisted_16$1 = ["onClick"];
const _sfc_main$d = defineComponent({
  __name: "WebauthnSignIn",
  props: {
    identifier: {},
    identifierType: {},
    appInfo: {}
  },
  setup(__props) {
    const props = __props;
    const showFailure = ref(false);
    const loading = ref(false);
    const { t, te: te2 } = useLocale();
    const { appId } = useAppId();
    const passage = new Y(appId.value);
    const { emitEvent: emitEvent2 } = useAuthEvent();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const { autofocusButton } = useAutofocusButton();
    const fallbackAuth = computed(() => {
      var _a;
      return (_a = props.appInfo.auth_fallback_method) != null ? _a : ue.MagicLink;
    });
    const supportsFallback = computed(() => {
      return props.appInfo.auth_fallback_method !== ue.None;
    });
    const fallbackSendCodeEmailOrTextBtnCopy = computed(() => {
      if (fallbackAuth.value === ue.LoginCode) {
        return te2("send-code") ? t("send-code") : "Send code";
      } else {
        return t("send-email-or-text-link", [isEmail.value ? t("email") : t("sms-text")]);
      }
    });
    const loginWithCodeEmailOrTextBtnCopy = computed(() => {
      if (fallbackAuth.value === ue.LoginCode) {
        return te2("login-with-code") ? t("login-with-code") : "Login with a code";
      } else {
        return t("login-with-link", [isEmail.value ? t("email") : t("sms-text")]);
      }
    });
    const failureLoginText = computed(() => {
      switch (props.appInfo.auth_fallback_method) {
        case ue.LoginCode:
          return te2("passkey-login-fail-try-code") ? t("passkey-login-fail-try-code") : "Unable to log in with a passkey. Try again or log in with a one-time code.";
        case ue.MagicLink:
          return t("passkey-login-fail-try-link");
        case ue.None:
          return t("passkey-login-fail-no-fallback");
      }
    });
    function signInWebAuthn() {
      return __async(this, null, function* () {
        showFailure.value = false;
        if (!props.identifier) {
          return;
        }
        loading.value = true;
        try {
          const authResult = yield passage.login(props.identifier);
          emitEvent2({
            type: AuthEventType.AuthSuccess,
            payload: {
              authResult,
              identifier: props.identifier
            }
          });
          loading.value = false;
        } catch (err) {
          const error = err;
          showFailure.value = true;
          loading.value = false;
          if (error.statusCode === T.PSGParsePublicKeyForLoginFailed) {
            showFailure.value = true;
          } else {
            emitEvent2({
              type: AuthEventType.FallbackAuth,
              payload: {
                identifier: props.identifier,
                identifierType: props.identifierType,
                userInitiated: false
              }
            });
          }
        }
      });
    }
    function loginWithFallback() {
      emitEvent2({
        type: AuthEventType.FallbackAuth,
        payload: {
          identifier: props.identifier,
          identifierType: props.identifierType,
          userInitiated: true
        }
      });
    }
    function changeEmail() {
      localStorage.removeItem("email");
      emitEvent2({
        type: AuthEventType.ChangeIdentifier,
        payload: void 0
      });
    }
    onMounted(() => {
      signInWebAuthn();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$b, [
        createBaseVNode("div", _hoisted_2$7, toDisplayString(unref(t)("log-in-with-a-passkey")), 1),
        createBaseVNode("figure", _hoisted_3$6, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).passkey,
            alt: "Log in with a passkey",
            style: { "margin": "5px" }
          }, null, 8, ["src"])
        ]),
        !showFailure.value ? (openBlock(), createBlock(_sfc_main$g, {
          key: 0,
          cta: unref(t)("log-into-your-account")
        }, null, 8, ["cta"])) : showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_4$6, [
          createBaseVNode("div", _hoisted_5$5, [
            createBaseVNode("p", null, toDisplayString(failureLoginText.value), 1)
          ])
        ])) : createCommentVNode("", true),
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_6$4, [
          createBaseVNode("button", {
            onClick: withModifiers(signInWebAuthn, ["prevent"]),
            type: "button",
            part: "button",
            class: "button is-primary",
            disabled: loading.value,
            style: { "margin-right": "5px" }
          }, toDisplayString(unref(t)("try-again")), 9, _hoisted_7$4),
          _ctx.appInfo.auth_fallback_method !== unref(ue).None ? (openBlock(), createElementBlock("button", {
            key: 0,
            onClick: withModifiers(loginWithFallback, ["prevent"]),
            type: "button",
            part: "button button-secondary",
            class: "button is-secondary",
            disabled: loading.value,
            style: { "margin-left": "5px" },
            "data-test": "login-with-email-button",
            ref_key: "autofocusButton",
            ref: autofocusButton
          }, toDisplayString(fallbackSendCodeEmailOrTextBtnCopy.value), 9, _hoisted_8$3)) : createCommentVNode("", true)
        ])) : createCommentVNode("", true),
        _hoisted_9$2,
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_10$1, [
          createBaseVNode("div", _hoisted_11$1, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("change-isemail-email-phone", [isEmail.value ? unref(t)("email") : unref(t)("phone")])), 9, _hoisted_12$1)
          ])
        ])) : createCommentVNode("", true),
        !showFailure.value ? (openBlock(), createElementBlock("div", {
          key: 4,
          class: normalizeClass(["flex-row flex-wrap", supportsFallback.value ? "flex-between" : "flex-center"])
        }, [
          createBaseVNode("div", _hoisted_13$1, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("back")), 9, _hoisted_14$1)
          ]),
          supportsFallback.value ? (openBlock(), createElementBlock("div", _hoisted_15$1, [
            createBaseVNode("a", {
              onClick: withModifiers(loginWithFallback, ["prevent"]),
              role: "button",
              "data-test": "register-email-button"
            }, toDisplayString(loginWithCodeEmailOrTextBtnCopy.value), 9, _hoisted_16$1)
          ])) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true)
      ]);
    };
  }
});
const _hoisted_1$a = { class: "view-webauthn-sign-in" };
const _sfc_main$c = defineComponent({
  __name: "WebauthnSignInView",
  props: {
    identifier: {},
    identifierType: {},
    appInfo: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$a, [
        createVNode(_sfc_main$d, {
          identifier: _ctx.identifier,
          identifierType: _ctx.identifierType,
          appInfo: _ctx.appInfo
        }, null, 8, ["identifier", "identifierType", "appInfo"])
      ]);
    };
  }
});
const _hoisted_1$9 = {
  style: { "display": "flex", "align-items": "center" },
  class: "psg-otp-single-input-container"
};
const _hoisted_2$6 = ["data-test", "type", "inputtype", "placeholder", "inputmode", "disabled", "maxlength", "autocomplete"];
const _hoisted_3$5 = { key: 0 };
const _hoisted_4$5 = ["innerHTML"];
const _sfc_main$b = defineComponent({
  __name: "OneTimePasscodeSingleInput",
  props: {
    conditionalClass: {},
    focus: { type: Boolean },
    inputClasses: { default: () => [] },
    inputmode: { default: "numeric" },
    inputType: { default: "number" },
    isDisabled: { type: Boolean },
    isLastChild: { type: Boolean },
    placeholder: {},
    separator: { default: "" },
    shouldAutoFocus: { type: Boolean, default: false },
    value: { default: "" },
    isFirstChild: { type: Boolean },
    inputIdx: {},
    inputCount: {}
  },
  emits: ["on-change", "on-keydown", "on-paste", "on-focus", "on-blur"],
  setup(__props, { emit }) {
    const props = __props;
    const model = ref(props.value || "");
    const input = ref(null);
    const inputTypeValue = computed(() => {
      return props.inputType === "letter-numeric" ? "text" : props.inputType;
    });
    const handleOnChange = () => {
      model.value = model.value.toString();
      if (model.value.length > 1) {
        model.value = model.value.slice(0, 1);
      }
      return emit("on-change", model.value);
    };
    const isCodeLetter = (charCode) => charCode >= 65 && charCode <= 90;
    const isCodeNumeric = (charCode) => charCode >= 48 && charCode <= 57 || charCode >= 96 && charCode <= 105;
    const handleOnKeyDown = (event) => {
      if (props.isDisabled) {
        event.preventDefault();
      }
      const keyEvent = event || window.event;
      const charCode = keyEvent.which ? keyEvent.which : keyEvent.keyCode;
      if (isCodeNumeric(charCode) || props.inputType === "letter-numeric" && isCodeLetter(charCode) || [8, 9, 13, 37, 39, 46, 86].includes(charCode)) {
        emit("on-keydown", event);
      } else {
        keyEvent.preventDefault();
      }
    };
    const handleOnPaste = (event) => emit("on-paste", event);
    const handleOnFocus = () => {
      input.value.select();
      return emit("on-focus");
    };
    const handleOnBlur = () => emit("on-blur");
    watch(
      () => props.value,
      (newValue, oldValue) => {
        if (newValue !== oldValue) {
          model.value = newValue;
        }
      }
    );
    watch(
      () => props.focus,
      (newFocusValue, oldFocusValue) => {
        if (oldFocusValue !== newFocusValue && input.value && props.focus) {
          input.value.focus();
          input.value.select();
        }
      }
    );
    onMounted(() => {
      if (input.value && props.focus && props.shouldAutoFocus) {
        input.value.focus();
        input.value.select();
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$9, [
        withDirectives(createBaseVNode("input", {
          "data-test": `single-input-${_ctx.inputIdx}`,
          type: inputTypeValue.value,
          inputtype: inputTypeValue.value,
          placeholder: _ctx.placeholder,
          inputmode: _ctx.inputmode,
          disabled: _ctx.isDisabled,
          ref_key: "input",
          ref: input,
          pattern: "[0-9]*",
          maxlength: _ctx.isFirstChild ? _ctx.inputCount : 1,
          min: "0",
          max: "9",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
          class: normalizeClass(["psg-input", "psg-otp-input", [..._ctx.inputClasses || []]]),
          onInput: handleOnChange,
          onKeydown: handleOnKeyDown,
          onPaste: handleOnPaste,
          onFocus: handleOnFocus,
          onBlur: handleOnBlur,
          autocomplete: _ctx.isFirstChild ? "one-time-code" : "off"
        }, null, 42, _hoisted_2$6), [
          [vModelDynamic, model.value]
        ]),
        !_ctx.isLastChild && _ctx.separator ? (openBlock(), createElementBlock("span", _hoisted_3$5, [
          createBaseVNode("span", { innerHTML: _ctx.separator }, null, 8, _hoisted_4$5)
        ])) : createCommentVNode("", true)
      ]);
    };
  }
});
const _hoisted_1$8 = {
  style: { "display": "flex", "justify-content": "space-between" },
  class: "psg-otp-input-container"
};
const _hoisted_2$5 = {
  key: 0,
  autocomplete: "off",
  name: "hidden",
  type: "text",
  style: { "display": "none" }
};
const _sfc_main$a = defineComponent({
  __name: "OneTimePasscodeInput",
  props: {
    value: { default: "" },
    numInputs: { default: 6 },
    separator: { default: "" },
    inputClasses: {},
    conditionalClass: { default: () => [] },
    inputType: { default: "number" },
    inputmode: { default: "numeric" },
    shouldAutoFocus: { type: Boolean, default: false },
    placeholder: { default: () => [] },
    isDisabled: { type: Boolean, default: false },
    disableNonCurrent: { type: Boolean, default: false }
  },
  emits: ["update:value", "on-complete", "on-change"],
  setup(__props, { emit }) {
    const props = __props;
    const activeInput = ref(0);
    const otp = ref([]);
    const oldOtp = ref([]);
    watch(
      () => props.value,
      (val) => {
        const fill = (unref(val) || "").padEnd(props.numInputs, " ").split("");
        otp.value = fill;
      },
      { immediate: true }
    );
    const handleOnFocus = (index) => {
      activeInput.value = index;
    };
    const handleOnBlur = () => {
      activeInput.value = -1;
    };
    const checkFilledAllInputs = () => {
      if (otp.value.join("").length === props.numInputs) {
        emit("update:value", otp.value.join(""));
        return emit("on-complete", otp.value.join(""));
      }
      return "Wait until the user enters the required number of characters";
    };
    const focusInput = (input) => {
      activeInput.value = Math.max(Math.min(props.numInputs - 1, input), 0);
    };
    const focusNextInput = () => {
      if (props.disableNonCurrent) {
        setTimeout(() => {
          focusInput(activeInput.value + 1);
        }, 200);
      } else {
        focusInput(activeInput.value + 1);
      }
    };
    const focusPrevInput = () => {
      focusInput(activeInput.value - 1);
    };
    const changeCodeAtFocus = (value) => {
      oldOtp.value = Object.assign([], otp.value);
      otp.value[activeInput.value] = value;
      if (oldOtp.value.join("") !== otp.value.join("")) {
        emit("update:value", otp.value.join(""));
        emit("on-change", otp.value.join(""));
      }
    };
    const handleOnPaste = (event) => {
      var _a;
      event.preventDefault();
      const pastedData = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/plain").slice(0, props.numInputs - activeInput.value).split("");
      if (props.inputType === "number" && !(pastedData == null ? void 0 : pastedData.join("").match(/^\d+$/))) {
        return "Invalid pasted data";
      }
      if (props.inputType === "letter-numeric" && !(pastedData == null ? void 0 : pastedData.join("").match(/^\w+$/))) {
        return "Invalid pasted data";
      }
      const currentCharsInOTP = otp.value.slice(0, activeInput.value);
      const combinedWithPastedData = currentCharsInOTP.concat(pastedData || "");
      combinedWithPastedData.slice(0, props.numInputs).forEach((value, i) => {
        otp.value[i] = value;
      });
      focusInput(combinedWithPastedData.slice(0, props.numInputs).length);
      return checkFilledAllInputs();
    };
    const handleOnChange = (value) => {
      changeCodeAtFocus(value);
      focusNextInput();
    };
    const handleOnKeyDown = (event) => {
      switch (event.keyCode) {
        case 8:
          event.preventDefault();
          changeCodeAtFocus("");
          focusPrevInput();
          break;
        case 46:
          event.preventDefault();
          changeCodeAtFocus("");
          break;
        case 37:
          event.preventDefault();
          focusPrevInput();
          break;
        case 39:
          event.preventDefault();
          focusNextInput();
          break;
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$8, [
        _ctx.inputType === "password" ? (openBlock(), createElementBlock("input", _hoisted_2$5)) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.numInputs, (_, i) => {
          return openBlock(), createBlock(_sfc_main$b, {
            key: i,
            focus: activeInput.value === i,
            value: otp.value[i],
            separator: _ctx.separator,
            "input-type": _ctx.inputType,
            inputmode: _ctx.inputmode,
            "input-classes": _ctx.inputClasses,
            conditionalClass: _ctx.conditionalClass[i],
            "is-last-child": i === _ctx.numInputs - 1,
            "is-first-child": i === 0,
            "should-auto-focus": _ctx.shouldAutoFocus,
            placeholder: _ctx.placeholder[i],
            "is-disabled": _ctx.isDisabled || _ctx.disableNonCurrent && i > otp.value.join("").trim().length,
            "input-idx": i,
            "input-count": _ctx.numInputs,
            onOnChange: handleOnChange,
            onOnKeydown: handleOnKeyDown,
            onOnPaste: handleOnPaste,
            onOnFocus: ($event) => handleOnFocus(i),
            onOnBlur: handleOnBlur
          }, null, 8, ["focus", "value", "separator", "input-type", "inputmode", "input-classes", "conditionalClass", "is-last-child", "is-first-child", "should-auto-focus", "placeholder", "is-disabled", "input-idx", "input-count", "onOnFocus"]);
        }), 128))
      ]);
    };
  }
});
const _hoisted_1$7 = { class: "auth-flex-container" };
const _hoisted_2$4 = { class: "title has-text-centered" };
const _hoisted_3$4 = { class: "content wrap-text" };
const _hoisted_4$4 = { style: { "margin-top": "32px", "margin-bottom": "40px" } };
const _hoisted_5$4 = ["innerHTML"];
const _hoisted_6$3 = { class: "flex flex-row flex-center" };
const _hoisted_7$3 = {
  class: "flex-row",
  style: { "margin-top": "8px" }
};
const _hoisted_8$2 = {
  class: "error-message",
  style: { "min-height": "17px" }
};
const _hoisted_9$1 = {
  class: "flex-row flex-center",
  style: { "margin-top": "16px" }
};
const _hoisted_10 = ["onClick", "disabled"];
const _hoisted_11 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_12 = { class: "flex-row flex-wrap flex-between" };
const _hoisted_13 = { class: "link" };
const _hoisted_14 = ["onClick"];
const _hoisted_15 = { class: "link" };
const _hoisted_16 = ["onClick"];
const numInputs = 6;
const disableInputsOnSendCodeError = false;
const _sfc_main$9 = defineComponent({
  __name: "OneTimePasscode",
  props: {
    identifier: {},
    userIsRegistering: { type: Boolean },
    identifierVerifying: { type: Boolean },
    setupNewDevice: { type: Boolean },
    identifierType: {}
  },
  setup(__props) {
    const props = __props;
    const { t, te: te2, locale } = useLocale();
    const { appId } = useAppId();
    const loading = ref(true);
    const oneTimePasscode = ref(void 0);
    const errorWithOneTimePasscode = ref(false);
    const errorSendingOneTimePasscode = ref(false);
    const errorMessage = ref(void 0);
    const otpId = ref(void 0);
    const title = computed(() => {
      return te2("enter-code") ? t("enter-code", {}) : "Enter code";
    });
    const message = computed(() => {
      return te2("enter-code-sent") ? t("enter-code-sent", [props.identifier]) : `A one-time code has been sent to <span style="font-weight: 700;">${props.identifier}</span>. Enter the code here to log in.`;
    });
    const btnGoBackText = computed(() => {
      return te2("back") ? t("back") : "Back";
    });
    const btnResendText = computed(() => {
      return te2("resend-code") ? t("resend-code") : "Resend code";
    });
    const oneTimePasscodeInputClasses = computed(() => {
      return errorWithOneTimePasscode.value ? ["has-error"] : [];
    });
    const oneTimePasscodeInputsDisabled = computed(() => {
      return disableInputsOnSendCodeError;
    });
    const continueBtnDisabled = computed(() => {
      return loading.value;
    });
    watch(oneTimePasscode, () => {
      var _a;
      _resetErrorState();
      if (((_a = oneTimePasscode.value) == null ? void 0 : _a.trim().length) === numInputs) {
        activateOneTimePasscode();
      }
    });
    const passage = new Y(appId.value);
    const sendOneTimePasscode = (isRegistering = false) => __async(this, null, function* () {
      _resetLoadingState();
      _resetErrorState();
      _resetOneTimePasscode();
      loading.value = true;
      try {
        const res = isRegistering ? yield passage.newRegisterOneTimePasscode(props.identifier, locale.value.split("-")[0]) : yield passage.newLoginOneTimePasscode(props.identifier, locale.value.split("-")[0]);
        if (res.otp_id != "") {
          localStorage.setItem("otp_id", res.otp_id);
          otpId.value = res.otp_id;
        }
      } catch (err) {
        setError(te2("code-send-error") ? t("code-send-error") : "An error occurred sending the code.", true);
      } finally {
        loading.value = false;
      }
    });
    const activateOneTimePasscode = () => __async(this, null, function* () {
      _resetLoadingState();
      _resetErrorState();
      loading.value = true;
      try {
        if (!oneTimePasscode.value) {
          throw new Error("Login code is undefined.");
        }
        if (oneTimePasscode.value.length !== numInputs) {
          throw new Error("Login code is invalid length.");
        }
        if (!otpId.value) {
          throw new Error("Login code id is undefined.");
        }
        const result = yield passage.oneTimePasscodeActivate(oneTimePasscode.value, otpId.value);
        if (result && result.redirect_url != "") {
          localStorage.removeItem("otp_id");
          useCallbacks().onEvent.value(OnEventType.onOneTimePasscodeActivated);
          useAuthEvent().emitEvent({
            type: AuthEventType.FallbackAuthSuccess,
            payload: {
              identifier: props.identifier,
              authResult: result
            }
          });
        }
      } catch (err) {
        setError(
          te2("code-invalid-or-expired") ? t("code-invalid-or-expired") : "Code is invalid or expired. Please try again."
        );
      } finally {
        loading.value = false;
      }
    });
    const onGoBackClicked = () => {
      useAuthEvent().emitEvent({ type: AuthEventType.ChangeIdentifier, payload: void 0 });
    };
    const onResendCodeClicked = () => {
      sendOneTimePasscode();
    };
    const onSubmitClicked = () => {
      activateOneTimePasscode();
    };
    onMounted(() => {
      sendOneTimePasscode(props.userIsRegistering);
      moveInput();
    });
    onBeforeUnmount(() => {
      cleanupInput();
    });
    const _resetLoadingState = () => {
      loading.value = true;
    };
    const _resetErrorState = () => {
      errorMessage.value = void 0;
      errorWithOneTimePasscode.value = false;
      errorSendingOneTimePasscode.value = false;
    };
    const _resetOneTimePasscode = () => {
      oneTimePasscode.value = void 0;
    };
    const setError = (message2, sending = false) => {
      errorMessage.value = message2;
      errorWithOneTimePasscode.value = !sending;
      errorSendingOneTimePasscode.value = sending;
    };
    const otpInput = ref();
    function moveInput() {
      const parent = otpInput.value.getRootNode().host;
      otpInput.value.appendChild(otcStyles());
      parent.appendChild(otpInput.value);
    }
    function cleanupInput() {
      otpInput.value.remove();
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$7, [
        createBaseVNode("form", null, [
          createBaseVNode("div", _hoisted_2$4, [
            createBaseVNode("span", null, toDisplayString(title.value), 1)
          ]),
          createBaseVNode("div", _hoisted_3$4, [
            createBaseVNode("div", _hoisted_4$4, [
              createBaseVNode("p", { innerHTML: message.value }, null, 8, _hoisted_5$4)
            ])
          ]),
          createBaseVNode("div", _hoisted_6$3, [
            createBaseVNode("div", {
              ref_key: "otpInput",
              ref: otpInput,
              slot: "otpInput"
            }, [
              createVNode(_sfc_main$a, {
                "num-inputs": numInputs,
                "is-disabled": oneTimePasscodeInputsDisabled.value,
                value: oneTimePasscode.value,
                "onUpdate:value": _cache[0] || (_cache[0] = ($event) => oneTimePasscode.value = $event),
                "input-classes": oneTimePasscodeInputClasses.value,
                "disable-non-current": false
              }, null, 8, ["is-disabled", "value", "input-classes"])
            ], 512),
            renderSlot(_ctx.$slots, "otpInput")
          ]),
          createBaseVNode("div", _hoisted_7$3, [
            createBaseVNode("div", _hoisted_8$2, toDisplayString(errorMessage.value ? errorMessage.value : " "), 1)
          ]),
          createBaseVNode("div", _hoisted_9$1, [
            createBaseVNode("button", {
              type: "submit",
              class: "button is-primary",
              part: "button",
              "data-test": "continue-button",
              onClick: withModifiers(onSubmitClicked, ["prevent"]),
              disabled: continueBtnDisabled.value
            }, toDisplayString(unref(t)("continue")), 9, _hoisted_10)
          ]),
          _hoisted_11,
          createBaseVNode("div", _hoisted_12, [
            createBaseVNode("div", _hoisted_13, [
              createBaseVNode("a", {
                onClick: withModifiers(onGoBackClicked, ["prevent"]),
                role: "button",
                "data-test": "one-time-passcode-goback-button"
              }, toDisplayString(btnGoBackText.value), 9, _hoisted_14)
            ]),
            createBaseVNode("div", _hoisted_15, [
              createBaseVNode("a", {
                onClick: withModifiers(onResendCodeClicked, ["prevent"]),
                role: "button",
                "data-test": "one-time-passcode-resend-button"
              }, toDisplayString(btnResendText.value), 9, _hoisted_16)
            ])
          ])
        ])
      ]);
    };
  }
});
const _hoisted_1$6 = { class: "view-access-token" };
const _sfc_main$8 = defineComponent({
  __name: "OneTimePasscodeView",
  props: {
    identifier: {},
    userIsRegistering: { type: Boolean },
    identifierVerifying: { type: Boolean },
    setupNewDevice: { type: Boolean },
    identifierType: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$6, [
        createVNode(_sfc_main$9, {
          identifier: _ctx.identifier,
          userIsRegistering: _ctx.userIsRegistering,
          identifierVerifying: _ctx.identifierVerifying,
          setupNewDevice: _ctx.setupNewDevice,
          identifierType: _ctx.identifierType
        }, {
          otpInput: withCtx(() => [
            renderSlot(_ctx.$slots, "otpInput")
          ]),
          _: 3
        }, 8, ["identifier", "userIsRegistering", "identifierVerifying", "setupNewDevice", "identifierType"])
      ]);
    };
  }
});
const _hoisted_1$5 = { class: "image has-text-centered" };
const _hoisted_2$3 = { key: 0 };
const _hoisted_3$3 = {
  class: "flex-row flex-center",
  style: { "padding": "20px 0px" }
};
const _hoisted_4$3 = ["onClick", "disabled"];
const _hoisted_5$3 = { key: 0 };
const _hoisted_6$2 = { key: 1 };
const _hoisted_7$2 = {
  key: 2,
  class: "link has-text-centered"
};
const _hoisted_8$1 = ["onClick"];
const _sfc_main$7 = defineComponent({
  __name: "AddDevice",
  props: {
    authResult: {},
    identifier: {}
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const { appId } = useAppId();
    const showFailure = ref(false);
    const showSuccess = ref(false);
    const newDevice = ref();
    const { addDevice, addPending } = useAddDevice(appId.value);
    const { autofocusButton } = useAutofocusButton();
    const title = computed(() => {
      if (showFailure.value) {
        return t("something-went-wrong");
      } else {
        return t("add-passkey");
      }
    });
    function onButtonClick() {
      return __async(this, null, function* () {
        var _a;
        newDevice.value = yield addDevice();
        if ((_a = newDevice.value) == null ? void 0 : _a.id) {
          showSuccess.value = true;
          showFailure.value = false;
          finishAuth();
        } else {
          showFailure.value = true;
          showSuccess.value = false;
        }
      });
    }
    const finishAuth = () => {
      useAuthEvent().emitEvent({
        type: AuthEventType.AuthSuccess,
        payload: {
          identifier: props.identifier,
          authResult: props.authResult
        }
      });
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("div", {
          class: normalizeClass(["title has-text-centered", [showFailure.value ? "secondary-title" : "main-title"]]),
          "data-test": "activate-magic-link-message"
        }, toDisplayString(title.value), 3),
        createBaseVNode("figure", _hoisted_1$5, [
          showFailure.value ? (openBlock(), createBlock(unref(InlineSvg), {
            key: 0,
            src: unref(Icons).fingerprintFailed,
            alt: "Device failure"
          }, null, 8, ["src"])) : (openBlock(), createBlock(unref(InlineSvg), {
            key: 1,
            src: unref(Icons).passkey,
            alt: "Add a passkey",
            style: { "margin": "5px" }
          }, null, 8, ["src"]))
        ]),
        showFailure.value ? (openBlock(), createElementBlock("div", _hoisted_2$3, toDisplayString(unref(t)("failed-to-add-this-device")), 1)) : (openBlock(), createBlock(_sfc_main$g, {
          key: 1,
          cta: unref(t)("log-into-your-account")
        }, null, 8, ["cta"])),
        createBaseVNode("div", _hoisted_3$3, [
          createBaseVNode("button", {
            onClick: withModifiers(onButtonClick, ["prevent"]),
            type: "button",
            class: normalizeClass(["button is-primary", { "is-loading": unref(addPending) }]),
            part: "button",
            disabled: unref(addPending),
            "data-test": "save-device-button",
            ref_key: "autofocusButton",
            ref: autofocusButton
          }, [
            showFailure.value ? (openBlock(), createElementBlock("span", _hoisted_5$3, toDisplayString(unref(t)("try-again")), 1)) : (openBlock(), createElementBlock("span", _hoisted_6$2, toDisplayString(unref(t)("add-passkey")), 1))
          ], 10, _hoisted_4$3)
        ]),
        !showSuccess.value ? (openBlock(), createElementBlock("div", _hoisted_7$2, [
          createBaseVNode("div", null, [
            createBaseVNode("a", {
              onClick: withModifiers(finishAuth, ["prevent"]),
              role: "button",
              "data-test": "add-device-skip"
            }, toDisplayString(unref(t)("skip")), 9, _hoisted_8$1)
          ])
        ])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _hoisted_1$4 = { class: "view-add-device" };
const _sfc_main$6 = defineComponent({
  __name: "AddDeviceView",
  props: {
    authResult: {},
    identifier: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$4, [
        createVNode(_sfc_main$7, {
          authResult: _ctx.authResult,
          identifier: _ctx.identifier
        }, null, 8, ["authResult", "identifier"])
      ]);
    };
  }
});
const _hoisted_1$3 = {
  class: "wrap-text",
  style: { "margin-bottom": "12px !important" }
};
const _hoisted_2$2 = { class: "passage-learnmore-header" };
const _hoisted_3$2 = { class: "passage-learnmore-body" };
const _hoisted_4$2 = { class: "passage-learnmore-header" };
const _hoisted_5$2 = { class: "passage-learnmore-body" };
const _sfc_main$5 = defineComponent({
  __name: "LearnMoreDisabledFallbacks",
  setup(__props) {
    const { t } = useLocale();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$h, null, {
        cta: withCtx(() => [
          createBaseVNode("div", _hoisted_1$3, toDisplayString(unref(t)("passkeys-are-required")) + toDisplayString(" "), 1),
          createTextVNode(" " + toDisplayString(unref(t)("try-again-on-device-with-passkeys")), 1)
        ]),
        body: withCtx(() => [
          createBaseVNode("div", _hoisted_2$2, toDisplayString(unref(t)("what-are-passkeys")), 1),
          createBaseVNode("div", _hoisted_3$2, toDisplayString(unref(t)("passkeys-are-a-simpler-and-more-secure-alternative")), 1),
          createBaseVNode("div", _hoisted_4$2, toDisplayString(unref(t)("devices-that-support-passkeys")), 1),
          createBaseVNode("div", _hoisted_5$2, toDisplayString(unref(t)("devices-with-a-biometric-sensor-are-likely-to-support-passkeys")), 1)
        ]),
        _: 1
      });
    };
  }
});
const _hoisted_1$2 = { class: "auth-flex-container" };
const _hoisted_2$1 = { class: "title has-text-centered" };
const _hoisted_3$1 = {
  class: "image has-text-centered",
  style: { "margin": "5px auto" }
};
const _hoisted_4$1 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_5$1 = { class: "flex-row flex-wrap flex-center" };
const _hoisted_6$1 = { class: "link" };
const _hoisted_7$1 = ["onClick"];
const _sfc_main$4 = defineComponent({
  __name: "DisableFallbacks",
  setup(__props) {
    const { t } = useLocale();
    const { emitEvent: emitEvent2 } = useAuthEvent();
    function changeEmail() {
      localStorage.removeItem("email");
      emitEvent2({
        type: AuthEventType.ChangeIdentifier,
        payload: void 0
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$2, [
        createBaseVNode("div", _hoisted_2$1, toDisplayString(unref(t)("device-not-supported")), 1),
        createBaseVNode("figure", _hoisted_3$1, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).passkeyArrow,
            alt: "Device not supported",
            style: { "margin": "5px" }
          }, null, 8, ["src"])
        ]),
        createVNode(_sfc_main$5),
        _hoisted_4$1,
        createBaseVNode("div", _hoisted_5$1, [
          createBaseVNode("div", _hoisted_6$1, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("back")), 9, _hoisted_7$1)
          ])
        ])
      ]);
    };
  }
});
const _sfc_main$3 = defineComponent({
  __name: "DisableFallbackView",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$4);
    };
  }
});
const _hoisted_1$1 = { class: "auth-flex-container" };
const _hoisted_2 = { class: "title has-text-centered" };
const _hoisted_3 = {
  class: "image has-text-centered",
  style: { "margin": "5px auto" }
};
const _hoisted_4 = {
  class: "wrap-text",
  style: { "margin-bottom": "12px !important" }
};
const _hoisted_5 = { class: "wrap-text" };
const _hoisted_6 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_7 = { class: "flex-row flex-wrap flex-center" };
const _hoisted_8 = { class: "link" };
const _hoisted_9 = ["onClick"];
const _sfc_main$2 = defineComponent({
  __name: "LoginNotSupported",
  setup(__props) {
    const { t } = useLocale();
    const { emitEvent: emitEvent2 } = useAuthEvent();
    function changeEmail() {
      localStorage.removeItem("email");
      emitEvent2({
        type: AuthEventType.ChangeIdentifier,
        payload: void 0
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$1, [
        createBaseVNode("div", _hoisted_2, toDisplayString(unref(t)("login-not-supported")), 1),
        createBaseVNode("figure", _hoisted_3, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).passkeyArrow,
            alt: "Device not supported",
            style: { "margin": "5px" }
          }, null, 8, ["src"])
        ]),
        createBaseVNode("div", _hoisted_4, toDisplayString(unref(t)("passkeys-are-now-required")), 1),
        createBaseVNode("div", _hoisted_5, toDisplayString(unref(t)("please-contact-support-to-regain-access")), 1),
        _hoisted_6,
        createBaseVNode("div", _hoisted_7, [
          createBaseVNode("div", _hoisted_8, [
            createBaseVNode("a", {
              onClick: withModifiers(changeEmail, ["prevent"]),
              role: "button",
              "data-test": "change-email-button"
            }, toDisplayString(unref(t)("back")), 9, _hoisted_9)
          ])
        ])
      ]);
    };
  }
});
const _sfc_main$1 = defineComponent({
  __name: "LoginNotSupportedView",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$2);
    };
  }
});
const AuthRoute = {
  component: _sfc_main$p
};
const LoginRoute = {
  component: _sfc_main$m
};
const RegisterRoute = {
  component: _sfc_main$l
};
const RegisterDeviceRoute = {
  component: _sfc_main$e
};
const MagicLinkRoute = {
  component: _sfc_main$i
};
const WebauthnSignInRoute = {
  component: _sfc_main$c
};
const ActivateMagicLinkRoute = {
  component: _sfc_main$n
};
const OneTimePasscodeRoute = {
  component: _sfc_main$8
};
const AddDeviceRoute = {
  component: _sfc_main$6
};
const DisableFallbacksRoute = {
  component: _sfc_main$3
};
const LoginNotSupportedRoute = {
  component: _sfc_main$1
};
class Router {
  constructor(homeRoute) {
    this._homeRoute = AuthRoute;
    this._history = [];
    if (homeRoute !== void 0) {
      this._homeRoute = homeRoute;
    }
  }
  get homeRoute() {
    return this._homeRoute;
  }
  set homeRoute(homeRoute) {
    this._homeRoute = homeRoute;
  }
  get currentRoute() {
    if (this._history.length === 0) {
      return void 0;
    }
    return this._history[this._history.length - 1];
  }
  push(route, props) {
    this._history.push(__spreadProps(__spreadValues({}, route), { props }));
  }
  resetRouter() {
    this._history = [];
  }
}
const _hoisted_1 = {
  key: 0,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
const _sfc_main = defineComponent({
  __name: "SmartRouter",
  props: {
    homeRoute: {}
  },
  setup(__props) {
    const props = __props;
    const router = reactive(new Router(props.homeRoute));
    const currentRoute = computed(() => router.currentRoute);
    const { t } = useLocale();
    const { appInfo, loading, invalidAppId } = useAppInfo();
    const { initEventHandler: initEventHandler2 } = useAuthEvent();
    const currentComponent = computed(() => {
      var _a;
      return (_a = currentRoute.value) == null ? void 0 : _a.component;
    });
    const currentProps = computed(() => {
      var _a;
      const props2 = (_a = currentRoute.value) == null ? void 0 : _a.props;
      if (props2 === void 0) {
        return {};
      }
      return props2;
    });
    const initialized = ref(false);
    watch(appInfo, () => __async(this, null, function* () {
      initialized.value = false;
      if (appInfo.value === void 0) {
        return;
      }
      yield initEventHandler2(appInfo.value, router);
      initialized.value = true;
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(Transition, {
          name: "fade",
          mode: "out-in",
          appear: ""
        }, {
          default: withCtx(() => [
            !unref(loading) && initialized.value ? (openBlock(), createBlock(resolveDynamicComponent(currentComponent.value), normalizeProps(mergeProps({ key: 0 }, currentProps.value)), {
              otpInput: withCtx(() => [
                renderSlot(_ctx.$slots, "otpInput")
              ]),
              loginInput: withCtx(() => [
                renderSlot(_ctx.$slots, "loginInput")
              ]),
              _: 3
            }, 16)) : createCommentVNode("", true)
          ]),
          _: 3
        }),
        unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_1, toDisplayString(unref(t)("invalid-app-id")), 1)) : createCommentVNode("", true)
      ], 64);
    };
  }
});
function useElementSetup(props) {
  function storeProps() {
    const { updateAppId } = useAppId();
    if (props.appId) {
      updateAppId(props.appId);
    }
    const { updateDefaultCountryCode } = useDefaultCountryCode();
    updateDefaultCountryCode(props.defaultCountryCode);
    const { setBeforeAuth: setBeforeAuth2, setOnSuccess: setOnSuccess2, setOnEvent: setOnEvent2 } = useCallbacks();
    setBeforeAuth2(props.beforeAuth);
    setOnSuccess2(props.onSuccess);
    setOnEvent2(props.onEvent);
  }
  storeProps();
  onBeforeUpdate(() => {
    storeProps();
  });
  const { languageLoading } = useStoreLocale(props);
  const containerRef = ref();
  useIntlTelInput(containerRef);
  return {
    languageLoading,
    containerRef
  };
}
export { AuthRoute as A, LoginRoute as L, RegisterRoute as R, _sfc_main as _, useElementSetup as u };
//# 
