/**
 * The features supported by the current browser for WebAuthn register operations.
 */
interface ICreateCredentialFeatures {
    /**
     * securityKeys are external keys, such as Yubikeys.
     */
    securityKey: boolean;
    /**
     * platform keys are generated by the user's device, often through biometrics.
     * These may or may not be cloud-backed up.
     */
    platform: boolean;
    /**
     * isAvailable is (securityKey || platform)
     */
    isAvailable: boolean;
}
/**
 * The features supported by the current browser for WebAuthn login operations.
 */
interface IGetCredentialFeatures {
    /**
     * securityKeys are external keys, such as Yubikeys.
     */
    securityKey: boolean;
    /**
     * platform credentials are generated by the user's device, often through biometrics.
     */
    platform: boolean;
    /**
     * A syncedCredential is a cloud-backed up credential via a service like iCloud or Google Password Manager.
     */
    syncedCredential: boolean;
    /**
     * A crossDeviceCredential is a credential that can be access by cross-device communication, most commonly a QR code
     */
    crossDeviceCredential: boolean;
    /**
     * Whether conditional mediation is supported for autofill opeartions.
     */
    conditionalUI: boolean;
    /**
     * isAvailable is (securityKey || platform || syncedCredential || crossDeviceCredential)
     */
    isAvailable: boolean;
}
type Transports = 'usb' | 'nfc' | 'ble' | 'hybrid' | 'internal';

/**
 * Utility functions that assist in creating WebAuthn credentials.
 */
declare class CreateCredentialUtils {
    /**
     * Uses information about the user's current browser to determine what features are availble for creating credentials via WebAuthn.
     * @return {Promise<ICreateCredentialFeatures>} The set of features supported by the browser.
     */
    static createCredentialAvailable(): Promise<ICreateCredentialFeatures>;
    /**
     * Decode public key from base64 encoding to Array buffer encoding.
     * Decodes `publicKey.challenge`, `publicKey.user.id`, and the `id` field from the `publicKey.excludeCredential` list
     * @param {PublicKeyCredentialCreationOptions} publicKey The base64 encoded public key
     * @return {PublicKeyCredentialCreationOptions}
     */
    static parsePublicKey(publicKey: PublicKeyCredentialCreationOptions): PublicKeyCredentialCreationOptions;
    /**
     * After creating a credential hints about what type of authenticator was used in the creattion of a credential. This information should
     * be stored on the backend and returned in the allowed credentials list for a get credential operation when logging in.
     * Not all browsers support getting Transport information, in that case return value will be an empty array.
     * See more at https://w3c.github.io/webauthn/#enum-transport
     * @param {PublicKeyCredential} credential The crednetial created by navigator.credentials.create
     * @return {Transports[]} The hints about what type of authenticator was used to create a credential.
     */
    static getTransports(credential: PublicKeyCredential): Transports[];
    /**
     * Peforms parsePublicKey, navigator.credentials.create, and getTransports to create a new WebAuthn credential.
     * This function can throw exceptions if the call to navigator.credentials.create times out or the user cancels the operation.
     * @param {PublicKeyCredentialCreationOptions} publicKey The base64 encoded public key
     * @return {Promise<{credential: (PublicKeyCredential | null), transports: Transports[]}>} A promise containing the created credential and
     */
    static createCredential(publicKey: PublicKeyCredentialCreationOptions): Promise<{
        credential: PublicKeyCredential | null;
        transports: Transports[];
    }>;
}

/**
 * Utility functions that assist in getting previously created WebAuthn credentials.
 */
declare class GetCredentialUtils {
    /**
     * Decode public key from base64 encoding to Array buffer encoding.
     * Decodes `publicKey.challenge`, and the `id` field from the `publicKey.allowCredentials` list
     * @param {PublicKeyCredentialRequestOptions} publicKey The base64 encoded public key
     * @return {PublicKeyCredentialRequestOptions}
     */
    static parsePublicKey(publicKey: PublicKeyCredentialRequestOptions): PublicKeyCredentialRequestOptions;
    /**
     * Performs parsePublicKey and navigator.credentials.get to get a previously created credential assertion
     * This function can throw exceptions if the call to navigator.credentials.get times out or the user cancels the operation.
     * @param {PublicKeyCredentialRequestOptions} publicKey The base64 encoded public key
     * @param {object} options Additional options to control mediation type and an AbortSignal
     * @return {Promise<(PublicKeyCredential | null)>} The assertion to validate against a WebAuthn finish backend call
     */
    static getCredential(publicKey: PublicKeyCredentialRequestOptions, options?: {
        mediation?: string;
        signal?: AbortSignal;
    }): Promise<PublicKeyCredential | null>;
    /**
     * Uses information about the user's current browser to determine what features are availble for getting credentials via WebAuthn.
     * @return {Promise<IGetCredentialFeatures>} The set of features supported by the browser.
     */
    static getCredentialAvailable(): Promise<IGetCredentialFeatures>;
    /**
     * Detects if conditional mediation is supported on this device
     * @return {Promise<boolean>}
     */
    private static _isConditionalMediationAvailable;
}

export { CreateCredentialUtils, GetCredentialUtils, ICreateCredentialFeatures, IGetCredentialFeatures, Transports };
